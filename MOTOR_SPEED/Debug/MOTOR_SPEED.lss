
MOTOR_SPEED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001da6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00001da6  00001e3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800080  00800080  00001e5a  2**0
                  ALLOC
  3 .stab         00001a94  00000000  00000000  00001e5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010b3  00000000  00000000  000038f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000049a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004c53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000689c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007787  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008534  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008694  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008921  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000090ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 5f 0c 	jmp	0x18be	; 0x18be <__vector_1>
       8:	0c 94 35 0c 	jmp	0x186a	; 0x186a <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 12 0d 	jmp	0x1a24	; 0x1a24 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 45 0d 	jmp	0x1a8a	; 0x1a8a <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ea       	ldi	r30, 0xA6	; 166
      68:	fd e1       	ldi	r31, 0x1D	; 29
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 89 0c 	call	0x1912	; 0x1912 <main>
      8a:	0c 94 d1 0e 	jmp	0x1da2	; 0x1da2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e6       	ldi	r26, 0x6D	; 109
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7d 0e 	jmp	0x1cfa	; 0x1cfa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7d 0e 	jmp	0x1cfa	; 0x1cfa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8d e6       	ldi	r24, 0x6D	; 109
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 7d 0e 	jmp	0x1cfa	; 0x1cfa <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 7d 0e 	jmp	0x1cfa	; 0x1cfa <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 7d 0e 	jmp	0x1cfa	; 0x1cfa <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 65 0e 	jmp	0x1cca	; 0x1cca <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 81 0e 	jmp	0x1d02	; 0x1d02 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_14>:
/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/

ISR(ADC_vect)
{
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     b70:	80 91 80 00 	lds	r24, 0x0080
     b74:	90 91 81 00 	lds	r25, 0x0081
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	29 f0       	breq	.+10     	; 0xb86 <__vector_14+0x40>
		{
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr_OVF(); */
     b7c:	e0 91 80 00 	lds	r30, 0x0080
     b80:	f0 91 81 00 	lds	r31, 0x0081
     b84:	09 95       	icall
		}
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	bf 91       	pop	r27
     b90:	af 91       	pop	r26
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	7f 91       	pop	r23
     b98:	6f 91       	pop	r22
     b9a:	5f 91       	pop	r21
     b9c:	4f 91       	pop	r20
     b9e:	3f 91       	pop	r19
     ba0:	2f 91       	pop	r18
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <ADC_setCallBack>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void ADC_setCallBack(void(*a_ptr)(void))
{
     bac:	df 93       	push	r29
     bae:	cf 93       	push	r28
     bb0:	00 d0       	rcall	.+0      	; 0xbb2 <ADC_setCallBack+0x6>
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
     bb6:	9a 83       	std	Y+2, r25	; 0x02
     bb8:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	9a 81       	ldd	r25, Y+2	; 0x02
     bbe:	90 93 81 00 	sts	0x0081, r25
     bc2:	80 93 80 00 	sts	0x0080, r24
}
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	cf 91       	pop	r28
     bcc:	df 91       	pop	r29
     bce:	08 95       	ret

00000bd0 <ADC_init>:

void ADC_init(const ADC_ConfigType *Config_Ptr)
{
     bd0:	df 93       	push	r29
     bd2:	cf 93       	push	r28
     bd4:	00 d0       	rcall	.+0      	; 0xbd6 <ADC_init+0x6>
     bd6:	00 d0       	rcall	.+0      	; 0xbd8 <ADC_init+0x8>
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62
     bdc:	9c 83       	std	Y+4, r25	; 0x04
     bde:	8b 83       	std	Y+3, r24	; 0x03
    uint8 VREFF , TRIGGER;

    VREFF = Config_Ptr->vref;
     be0:	eb 81       	ldd	r30, Y+3	; 0x03
     be2:	fc 81       	ldd	r31, Y+4	; 0x04
     be4:	80 81       	ld	r24, Z
     be6:	8a 83       	std	Y+2, r24	; 0x02
    TRIGGER = Config_Ptr->trigger;
     be8:	eb 81       	ldd	r30, Y+3	; 0x03
     bea:	fc 81       	ldd	r31, Y+4	; 0x04
     bec:	81 81       	ldd	r24, Z+1	; 0x01
     bee:	89 83       	std	Y+1, r24	; 0x01
	ADC_CRL_STATUS_REG_A |= (1<<ADEN);
     bf0:	a6 e2       	ldi	r26, 0x26	; 38
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	e6 e2       	ldi	r30, 0x26	; 38
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	80 68       	ori	r24, 0x80	; 128
     bfc:	8c 93       	st	X, r24
	if( Config_Ptr-> mode == INTERRUPT )
     bfe:	eb 81       	ldd	r30, Y+3	; 0x03
     c00:	fc 81       	ldd	r31, Y+4	; 0x04
     c02:	82 81       	ldd	r24, Z+2	; 0x02
     c04:	81 30       	cpi	r24, 0x01	; 1
     c06:	99 f4       	brne	.+38     	; 0xc2e <ADC_init+0x5e>
	{
		if( BIT_IS_CLEAR(SREG, 7) ) SET_BIT( SREG, 7 );
     c08:	ef e5       	ldi	r30, 0x5F	; 95
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	88 23       	and	r24, r24
     c10:	3c f0       	brlt	.+14     	; 0xc20 <ADC_init+0x50>
     c12:	af e5       	ldi	r26, 0x5F	; 95
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	ef e5       	ldi	r30, 0x5F	; 95
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	80 68       	ori	r24, 0x80	; 128
     c1e:	8c 93       	st	X, r24
		ADC_CRL_STATUS_REG_A |= (1<<ADIE);
     c20:	a6 e2       	ldi	r26, 0x26	; 38
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	e6 e2       	ldi	r30, 0x26	; 38
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	88 60       	ori	r24, 0x08	; 8
     c2c:	8c 93       	st	X, r24

	}


	ADC_MUX_SEL_REG = ( ADC_MUX_SEL_REG & 0x3F) | ( ROR( VREFF ,2) ) ;
     c2e:	a7 e2       	ldi	r26, 0x27	; 39
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e7 e2       	ldi	r30, 0x27	; 39
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	38 2f       	mov	r19, r24
     c3a:	3f 73       	andi	r19, 0x3F	; 63
     c3c:	8a 81       	ldd	r24, Y+2	; 0x02
     c3e:	86 95       	lsr	r24
     c40:	86 95       	lsr	r24
     c42:	28 2f       	mov	r18, r24
     c44:	8a 81       	ldd	r24, Y+2	; 0x02
     c46:	88 2f       	mov	r24, r24
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	00 24       	eor	r0, r0
     c4c:	96 95       	lsr	r25
     c4e:	87 95       	ror	r24
     c50:	07 94       	ror	r0
     c52:	96 95       	lsr	r25
     c54:	87 95       	ror	r24
     c56:	07 94       	ror	r0
     c58:	98 2f       	mov	r25, r24
     c5a:	80 2d       	mov	r24, r0
     c5c:	82 2b       	or	r24, r18
     c5e:	8a 83       	std	Y+2, r24	; 0x02
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	83 2b       	or	r24, r19
     c64:	8c 93       	st	X, r24

	if(Config_Ptr ->trigger != FREE_RUNNING)
     c66:	eb 81       	ldd	r30, Y+3	; 0x03
     c68:	fc 81       	ldd	r31, Y+4	; 0x04
     c6a:	81 81       	ldd	r24, Z+1	; 0x01
     c6c:	88 23       	and	r24, r24
     c6e:	19 f1       	breq	.+70     	; 0xcb6 <ADC_init+0xe6>
	{
		SET_BIT(ADC_CRL_STATUS_REG_A, 5);
     c70:	a6 e2       	ldi	r26, 0x26	; 38
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e6 e2       	ldi	r30, 0x26	; 38
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	80 62       	ori	r24, 0x20	; 32
     c7c:	8c 93       	st	X, r24
		ADC_FUNC_REG = ( ADC_FUNC_REG & 0x1F) | (  ROR(TRIGGER ,3) );
     c7e:	a0 e5       	ldi	r26, 0x50	; 80
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e0 e5       	ldi	r30, 0x50	; 80
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	38 2f       	mov	r19, r24
     c8a:	3f 71       	andi	r19, 0x1F	; 31
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	86 95       	lsr	r24
     c90:	86 95       	lsr	r24
     c92:	86 95       	lsr	r24
     c94:	28 2f       	mov	r18, r24
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	88 2f       	mov	r24, r24
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	88 0f       	add	r24, r24
     c9e:	99 1f       	adc	r25, r25
     ca0:	82 95       	swap	r24
     ca2:	92 95       	swap	r25
     ca4:	90 7f       	andi	r25, 0xF0	; 240
     ca6:	98 27       	eor	r25, r24
     ca8:	80 7f       	andi	r24, 0xF0	; 240
     caa:	98 27       	eor	r25, r24
     cac:	82 2b       	or	r24, r18
     cae:	89 83       	std	Y+1, r24	; 0x01
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	83 2b       	or	r24, r19
     cb4:	8c 93       	st	X, r24
	}

	ADC_MUX_SEL_REG = ( ADC_MUX_SEL_REG & 0xF8) | ( Config_Ptr-> prescaler) ;
     cb6:	a7 e2       	ldi	r26, 0x27	; 39
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e7 e2       	ldi	r30, 0x27	; 39
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	98 2f       	mov	r25, r24
     cc2:	98 7f       	andi	r25, 0xF8	; 248
     cc4:	eb 81       	ldd	r30, Y+3	; 0x03
     cc6:	fc 81       	ldd	r31, Y+4	; 0x04
     cc8:	83 81       	ldd	r24, Z+3	; 0x03
     cca:	89 2b       	or	r24, r25
     ccc:	8c 93       	st	X, r24

	if(Config_Ptr ->adjust == LEFT_ADJUST)
     cce:	eb 81       	ldd	r30, Y+3	; 0x03
     cd0:	fc 81       	ldd	r31, Y+4	; 0x04
     cd2:	84 81       	ldd	r24, Z+4	; 0x04
     cd4:	88 23       	and	r24, r24
     cd6:	39 f4       	brne	.+14     	; 0xce6 <ADC_init+0x116>
	{
		SET_BIT(ADC_MUX_SEL_REG,5);
     cd8:	a7 e2       	ldi	r26, 0x27	; 39
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	e7 e2       	ldi	r30, 0x27	; 39
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	80 62       	ori	r24, 0x20	; 32
     ce4:	8c 93       	st	X, r24
	}
}
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	cf 91       	pop	r28
     cf0:	df 91       	pop	r29
     cf2:	08 95       	ret

00000cf4 <ADC_readChannel>:
//	 */
//	ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);
//}

uint16 ADC_readChannel(uint8 channel_num, const ADC_ConfigType *Config_Ptr)
{
     cf4:	df 93       	push	r29
     cf6:	cf 93       	push	r28
     cf8:	00 d0       	rcall	.+0      	; 0xcfa <ADC_readChannel+0x6>
     cfa:	00 d0       	rcall	.+0      	; 0xcfc <ADC_readChannel+0x8>
     cfc:	0f 92       	push	r0
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
     d02:	89 83       	std	Y+1, r24	; 0x01
     d04:	7b 83       	std	Y+3, r23	; 0x03
     d06:	6a 83       	std	Y+2, r22	; 0x02
	channel_num &= 0x07; /* channel number must be from 0 --> 7 */
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	87 70       	andi	r24, 0x07	; 7
     d0c:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
     d0e:	a7 e2       	ldi	r26, 0x27	; 39
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e7 e2       	ldi	r30, 0x27	; 39
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	80 7e       	andi	r24, 0xE0	; 224
     d1a:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* choose the correct channel by setting the channel number in MUX4:0 bits */
     d1c:	a7 e2       	ldi	r26, 0x27	; 39
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e7 e2       	ldi	r30, 0x27	; 39
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	90 81       	ld	r25, Z
     d26:	89 81       	ldd	r24, Y+1	; 0x01
     d28:	89 2b       	or	r24, r25
     d2a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* start conversion write '1' to ADSC */
     d2c:	a6 e2       	ldi	r26, 0x26	; 38
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e6 e2       	ldi	r30, 0x26	; 38
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	80 64       	ori	r24, 0x40	; 64
     d38:	8c 93       	st	X, r24
	if(Config_Ptr -> mode == POLLING)
     d3a:	ea 81       	ldd	r30, Y+2	; 0x02
     d3c:	fb 81       	ldd	r31, Y+3	; 0x03
     d3e:	82 81       	ldd	r24, Z+2	; 0x02
     d40:	88 23       	and	r24, r24
     d42:	b9 f4       	brne	.+46     	; 0xd72 <ADC_readChannel+0x7e>
	{
		while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* wait for conversion to complete ADIF becomes '1' */
     d44:	e6 e2       	ldi	r30, 0x26	; 38
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	88 2f       	mov	r24, r24
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	80 71       	andi	r24, 0x10	; 16
     d50:	90 70       	andi	r25, 0x00	; 0
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	b9 f3       	breq	.-18     	; 0xd44 <ADC_readChannel+0x50>
		SET_BIT(ADCSRA,ADIF); /* clear ADIF by write '1' to it :) */
     d56:	a6 e2       	ldi	r26, 0x26	; 38
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e6 e2       	ldi	r30, 0x26	; 38
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	80 61       	ori	r24, 0x10	; 16
     d62:	8c 93       	st	X, r24
		return ADC; /* return the data register */
     d64:	e4 e2       	ldi	r30, 0x24	; 36
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	91 81       	ldd	r25, Z+1	; 0x01
     d6c:	9d 83       	std	Y+5, r25	; 0x05
     d6e:	8c 83       	std	Y+4, r24	; 0x04
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <ADC_readChannel+0x82>
	}
	return 0;
     d72:	1d 82       	std	Y+5, r1	; 0x05
     d74:	1c 82       	std	Y+4, r1	; 0x04
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
}
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	cf 91       	pop	r28
     d86:	df 91       	pop	r29
     d88:	08 95       	ret

00000d8a <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
     d8a:	df 93       	push	r29
     d8c:	cf 93       	push	r28
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
     d92:	e4 e3       	ldi	r30, 0x34	; 52
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	8f ef       	ldi	r24, 0xFF	; 255
     d98:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
     d9a:	a1 e3       	ldi	r26, 0x31	; 49
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e1 e3       	ldi	r30, 0x31	; 49
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	80 67       	ori	r24, 0x70	; 112
     da6:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
     da8:	88 e3       	ldi	r24, 0x38	; 56
     daa:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
     dae:	8c e0       	ldi	r24, 0x0C	; 12
     db0:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <LCD_sendCommand>
}
     dba:	cf 91       	pop	r28
     dbc:	df 91       	pop	r29
     dbe:	08 95       	ret

00000dc0 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
     dc0:	df 93       	push	r29
     dc2:	cf 93       	push	r28
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
     dc8:	e9 97       	sbiw	r28, 0x39	; 57
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	f8 94       	cli
     dce:	de bf       	out	0x3e, r29	; 62
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	cd bf       	out	0x3d, r28	; 61
     dd4:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
     dd6:	a2 e3       	ldi	r26, 0x32	; 50
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e2 e3       	ldi	r30, 0x32	; 50
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	8f 7e       	andi	r24, 0xEF	; 239
     de2:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
     de4:	a2 e3       	ldi	r26, 0x32	; 50
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e2 e3       	ldi	r30, 0x32	; 50
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	8f 7d       	andi	r24, 0xDF	; 223
     df0:	8c 93       	st	X, r24
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	a0 e8       	ldi	r26, 0x80	; 128
     df8:	bf e3       	ldi	r27, 0x3F	; 63
     dfa:	8d ab       	std	Y+53, r24	; 0x35
     dfc:	9e ab       	std	Y+54, r25	; 0x36
     dfe:	af ab       	std	Y+55, r26	; 0x37
     e00:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e02:	6d a9       	ldd	r22, Y+53	; 0x35
     e04:	7e a9       	ldd	r23, Y+54	; 0x36
     e06:	8f a9       	ldd	r24, Y+55	; 0x37
     e08:	98 ad       	ldd	r25, Y+56	; 0x38
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	4a e7       	ldi	r20, 0x7A	; 122
     e10:	53 e4       	ldi	r21, 0x43	; 67
     e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e16:	dc 01       	movw	r26, r24
     e18:	cb 01       	movw	r24, r22
     e1a:	89 ab       	std	Y+49, r24	; 0x31
     e1c:	9a ab       	std	Y+50, r25	; 0x32
     e1e:	ab ab       	std	Y+51, r26	; 0x33
     e20:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e22:	69 a9       	ldd	r22, Y+49	; 0x31
     e24:	7a a9       	ldd	r23, Y+50	; 0x32
     e26:	8b a9       	ldd	r24, Y+51	; 0x33
     e28:	9c a9       	ldd	r25, Y+52	; 0x34
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	40 e8       	ldi	r20, 0x80	; 128
     e30:	5f e3       	ldi	r21, 0x3F	; 63
     e32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e36:	88 23       	and	r24, r24
     e38:	2c f4       	brge	.+10     	; 0xe44 <LCD_sendCommand+0x84>
		__ticks = 1;
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	98 ab       	std	Y+48, r25	; 0x30
     e40:	8f a7       	std	Y+47, r24	; 0x2f
     e42:	3f c0       	rjmp	.+126    	; 0xec2 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
     e44:	69 a9       	ldd	r22, Y+49	; 0x31
     e46:	7a a9       	ldd	r23, Y+50	; 0x32
     e48:	8b a9       	ldd	r24, Y+51	; 0x33
     e4a:	9c a9       	ldd	r25, Y+52	; 0x34
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	3f ef       	ldi	r19, 0xFF	; 255
     e50:	4f e7       	ldi	r20, 0x7F	; 127
     e52:	57 e4       	ldi	r21, 0x47	; 71
     e54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e58:	18 16       	cp	r1, r24
     e5a:	4c f5       	brge	.+82     	; 0xeae <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e5c:	6d a9       	ldd	r22, Y+53	; 0x35
     e5e:	7e a9       	ldd	r23, Y+54	; 0x36
     e60:	8f a9       	ldd	r24, Y+55	; 0x37
     e62:	98 ad       	ldd	r25, Y+56	; 0x38
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	40 e2       	ldi	r20, 0x20	; 32
     e6a:	51 e4       	ldi	r21, 0x41	; 65
     e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e70:	dc 01       	movw	r26, r24
     e72:	cb 01       	movw	r24, r22
     e74:	bc 01       	movw	r22, r24
     e76:	cd 01       	movw	r24, r26
     e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e7c:	dc 01       	movw	r26, r24
     e7e:	cb 01       	movw	r24, r22
     e80:	98 ab       	std	Y+48, r25	; 0x30
     e82:	8f a7       	std	Y+47, r24	; 0x2f
     e84:	0f c0       	rjmp	.+30     	; 0xea4 <LCD_sendCommand+0xe4>
     e86:	89 e1       	ldi	r24, 0x19	; 25
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	9e a7       	std	Y+46, r25	; 0x2e
     e8c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e8e:	8d a5       	ldd	r24, Y+45	; 0x2d
     e90:	9e a5       	ldd	r25, Y+46	; 0x2e
     e92:	01 97       	sbiw	r24, 0x01	; 1
     e94:	f1 f7       	brne	.-4      	; 0xe92 <LCD_sendCommand+0xd2>
     e96:	9e a7       	std	Y+46, r25	; 0x2e
     e98:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e9a:	8f a5       	ldd	r24, Y+47	; 0x2f
     e9c:	98 a9       	ldd	r25, Y+48	; 0x30
     e9e:	01 97       	sbiw	r24, 0x01	; 1
     ea0:	98 ab       	std	Y+48, r25	; 0x30
     ea2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ea4:	8f a5       	ldd	r24, Y+47	; 0x2f
     ea6:	98 a9       	ldd	r25, Y+48	; 0x30
     ea8:	00 97       	sbiw	r24, 0x00	; 0
     eaa:	69 f7       	brne	.-38     	; 0xe86 <LCD_sendCommand+0xc6>
     eac:	14 c0       	rjmp	.+40     	; 0xed6 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eae:	69 a9       	ldd	r22, Y+49	; 0x31
     eb0:	7a a9       	ldd	r23, Y+50	; 0x32
     eb2:	8b a9       	ldd	r24, Y+51	; 0x33
     eb4:	9c a9       	ldd	r25, Y+52	; 0x34
     eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eba:	dc 01       	movw	r26, r24
     ebc:	cb 01       	movw	r24, r22
     ebe:	98 ab       	std	Y+48, r25	; 0x30
     ec0:	8f a7       	std	Y+47, r24	; 0x2f
     ec2:	8f a5       	ldd	r24, Y+47	; 0x2f
     ec4:	98 a9       	ldd	r25, Y+48	; 0x30
     ec6:	9c a7       	std	Y+44, r25	; 0x2c
     ec8:	8b a7       	std	Y+43, r24	; 0x2b
     eca:	8b a5       	ldd	r24, Y+43	; 0x2b
     ecc:	9c a5       	ldd	r25, Y+44	; 0x2c
     ece:	01 97       	sbiw	r24, 0x01	; 1
     ed0:	f1 f7       	brne	.-4      	; 0xece <LCD_sendCommand+0x10e>
     ed2:	9c a7       	std	Y+44, r25	; 0x2c
     ed4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
     ed6:	a2 e3       	ldi	r26, 0x32	; 50
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e2 e3       	ldi	r30, 0x32	; 50
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	80 64       	ori	r24, 0x40	; 64
     ee2:	8c 93       	st	X, r24
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	a0 e8       	ldi	r26, 0x80	; 128
     eea:	bf e3       	ldi	r27, 0x3F	; 63
     eec:	8f a3       	std	Y+39, r24	; 0x27
     eee:	98 a7       	std	Y+40, r25	; 0x28
     ef0:	a9 a7       	std	Y+41, r26	; 0x29
     ef2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ef4:	6f a1       	ldd	r22, Y+39	; 0x27
     ef6:	78 a5       	ldd	r23, Y+40	; 0x28
     ef8:	89 a5       	ldd	r24, Y+41	; 0x29
     efa:	9a a5       	ldd	r25, Y+42	; 0x2a
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	4a e7       	ldi	r20, 0x7A	; 122
     f02:	53 e4       	ldi	r21, 0x43	; 67
     f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f08:	dc 01       	movw	r26, r24
     f0a:	cb 01       	movw	r24, r22
     f0c:	8b a3       	std	Y+35, r24	; 0x23
     f0e:	9c a3       	std	Y+36, r25	; 0x24
     f10:	ad a3       	std	Y+37, r26	; 0x25
     f12:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f14:	6b a1       	ldd	r22, Y+35	; 0x23
     f16:	7c a1       	ldd	r23, Y+36	; 0x24
     f18:	8d a1       	ldd	r24, Y+37	; 0x25
     f1a:	9e a1       	ldd	r25, Y+38	; 0x26
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	40 e8       	ldi	r20, 0x80	; 128
     f22:	5f e3       	ldi	r21, 0x3F	; 63
     f24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f28:	88 23       	and	r24, r24
     f2a:	2c f4       	brge	.+10     	; 0xf36 <LCD_sendCommand+0x176>
		__ticks = 1;
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	9a a3       	std	Y+34, r25	; 0x22
     f32:	89 a3       	std	Y+33, r24	; 0x21
     f34:	3f c0       	rjmp	.+126    	; 0xfb4 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
     f36:	6b a1       	ldd	r22, Y+35	; 0x23
     f38:	7c a1       	ldd	r23, Y+36	; 0x24
     f3a:	8d a1       	ldd	r24, Y+37	; 0x25
     f3c:	9e a1       	ldd	r25, Y+38	; 0x26
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	3f ef       	ldi	r19, 0xFF	; 255
     f42:	4f e7       	ldi	r20, 0x7F	; 127
     f44:	57 e4       	ldi	r21, 0x47	; 71
     f46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f4a:	18 16       	cp	r1, r24
     f4c:	4c f5       	brge	.+82     	; 0xfa0 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f4e:	6f a1       	ldd	r22, Y+39	; 0x27
     f50:	78 a5       	ldd	r23, Y+40	; 0x28
     f52:	89 a5       	ldd	r24, Y+41	; 0x29
     f54:	9a a5       	ldd	r25, Y+42	; 0x2a
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	40 e2       	ldi	r20, 0x20	; 32
     f5c:	51 e4       	ldi	r21, 0x41	; 65
     f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	bc 01       	movw	r22, r24
     f68:	cd 01       	movw	r24, r26
     f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f6e:	dc 01       	movw	r26, r24
     f70:	cb 01       	movw	r24, r22
     f72:	9a a3       	std	Y+34, r25	; 0x22
     f74:	89 a3       	std	Y+33, r24	; 0x21
     f76:	0f c0       	rjmp	.+30     	; 0xf96 <LCD_sendCommand+0x1d6>
     f78:	89 e1       	ldi	r24, 0x19	; 25
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	98 a3       	std	Y+32, r25	; 0x20
     f7e:	8f 8f       	std	Y+31, r24	; 0x1f
     f80:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f82:	98 a1       	ldd	r25, Y+32	; 0x20
     f84:	01 97       	sbiw	r24, 0x01	; 1
     f86:	f1 f7       	brne	.-4      	; 0xf84 <LCD_sendCommand+0x1c4>
     f88:	98 a3       	std	Y+32, r25	; 0x20
     f8a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f8c:	89 a1       	ldd	r24, Y+33	; 0x21
     f8e:	9a a1       	ldd	r25, Y+34	; 0x22
     f90:	01 97       	sbiw	r24, 0x01	; 1
     f92:	9a a3       	std	Y+34, r25	; 0x22
     f94:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f96:	89 a1       	ldd	r24, Y+33	; 0x21
     f98:	9a a1       	ldd	r25, Y+34	; 0x22
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	69 f7       	brne	.-38     	; 0xf78 <LCD_sendCommand+0x1b8>
     f9e:	14 c0       	rjmp	.+40     	; 0xfc8 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa0:	6b a1       	ldd	r22, Y+35	; 0x23
     fa2:	7c a1       	ldd	r23, Y+36	; 0x24
     fa4:	8d a1       	ldd	r24, Y+37	; 0x25
     fa6:	9e a1       	ldd	r25, Y+38	; 0x26
     fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	9a a3       	std	Y+34, r25	; 0x22
     fb2:	89 a3       	std	Y+33, r24	; 0x21
     fb4:	89 a1       	ldd	r24, Y+33	; 0x21
     fb6:	9a a1       	ldd	r25, Y+34	; 0x22
     fb8:	9e 8f       	std	Y+30, r25	; 0x1e
     fba:	8d 8f       	std	Y+29, r24	; 0x1d
     fbc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fbe:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	f1 f7       	brne	.-4      	; 0xfc0 <LCD_sendCommand+0x200>
     fc4:	9e 8f       	std	Y+30, r25	; 0x1e
     fc6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
     fc8:	e5 e3       	ldi	r30, 0x35	; 53
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	89 ad       	ldd	r24, Y+57	; 0x39
     fce:	80 83       	st	Z, r24
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	a0 e8       	ldi	r26, 0x80	; 128
     fd6:	bf e3       	ldi	r27, 0x3F	; 63
     fd8:	89 8f       	std	Y+25, r24	; 0x19
     fda:	9a 8f       	std	Y+26, r25	; 0x1a
     fdc:	ab 8f       	std	Y+27, r26	; 0x1b
     fde:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe0:	69 8d       	ldd	r22, Y+25	; 0x19
     fe2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fe4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fe6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	4a e7       	ldi	r20, 0x7A	; 122
     fee:	53 e4       	ldi	r21, 0x43	; 67
     ff0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	8d 8b       	std	Y+21, r24	; 0x15
     ffa:	9e 8b       	std	Y+22, r25	; 0x16
     ffc:	af 8b       	std	Y+23, r26	; 0x17
     ffe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1000:	6d 89       	ldd	r22, Y+21	; 0x15
    1002:	7e 89       	ldd	r23, Y+22	; 0x16
    1004:	8f 89       	ldd	r24, Y+23	; 0x17
    1006:	98 8d       	ldd	r25, Y+24	; 0x18
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e8       	ldi	r20, 0x80	; 128
    100e:	5f e3       	ldi	r21, 0x3F	; 63
    1010:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1014:	88 23       	and	r24, r24
    1016:	2c f4       	brge	.+10     	; 0x1022 <LCD_sendCommand+0x262>
		__ticks = 1;
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	9c 8b       	std	Y+20, r25	; 0x14
    101e:	8b 8b       	std	Y+19, r24	; 0x13
    1020:	3f c0       	rjmp	.+126    	; 0x10a0 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1022:	6d 89       	ldd	r22, Y+21	; 0x15
    1024:	7e 89       	ldd	r23, Y+22	; 0x16
    1026:	8f 89       	ldd	r24, Y+23	; 0x17
    1028:	98 8d       	ldd	r25, Y+24	; 0x18
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	3f ef       	ldi	r19, 0xFF	; 255
    102e:	4f e7       	ldi	r20, 0x7F	; 127
    1030:	57 e4       	ldi	r21, 0x47	; 71
    1032:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1036:	18 16       	cp	r1, r24
    1038:	4c f5       	brge	.+82     	; 0x108c <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    103a:	69 8d       	ldd	r22, Y+25	; 0x19
    103c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    103e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1040:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	40 e2       	ldi	r20, 0x20	; 32
    1048:	51 e4       	ldi	r21, 0x41	; 65
    104a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    104e:	dc 01       	movw	r26, r24
    1050:	cb 01       	movw	r24, r22
    1052:	bc 01       	movw	r22, r24
    1054:	cd 01       	movw	r24, r26
    1056:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    105a:	dc 01       	movw	r26, r24
    105c:	cb 01       	movw	r24, r22
    105e:	9c 8b       	std	Y+20, r25	; 0x14
    1060:	8b 8b       	std	Y+19, r24	; 0x13
    1062:	0f c0       	rjmp	.+30     	; 0x1082 <LCD_sendCommand+0x2c2>
    1064:	89 e1       	ldi	r24, 0x19	; 25
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	9a 8b       	std	Y+18, r25	; 0x12
    106a:	89 8b       	std	Y+17, r24	; 0x11
    106c:	89 89       	ldd	r24, Y+17	; 0x11
    106e:	9a 89       	ldd	r25, Y+18	; 0x12
    1070:	01 97       	sbiw	r24, 0x01	; 1
    1072:	f1 f7       	brne	.-4      	; 0x1070 <LCD_sendCommand+0x2b0>
    1074:	9a 8b       	std	Y+18, r25	; 0x12
    1076:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1078:	8b 89       	ldd	r24, Y+19	; 0x13
    107a:	9c 89       	ldd	r25, Y+20	; 0x14
    107c:	01 97       	sbiw	r24, 0x01	; 1
    107e:	9c 8b       	std	Y+20, r25	; 0x14
    1080:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1082:	8b 89       	ldd	r24, Y+19	; 0x13
    1084:	9c 89       	ldd	r25, Y+20	; 0x14
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	69 f7       	brne	.-38     	; 0x1064 <LCD_sendCommand+0x2a4>
    108a:	14 c0       	rjmp	.+40     	; 0x10b4 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    108c:	6d 89       	ldd	r22, Y+21	; 0x15
    108e:	7e 89       	ldd	r23, Y+22	; 0x16
    1090:	8f 89       	ldd	r24, Y+23	; 0x17
    1092:	98 8d       	ldd	r25, Y+24	; 0x18
    1094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	9c 8b       	std	Y+20, r25	; 0x14
    109e:	8b 8b       	std	Y+19, r24	; 0x13
    10a0:	8b 89       	ldd	r24, Y+19	; 0x13
    10a2:	9c 89       	ldd	r25, Y+20	; 0x14
    10a4:	98 8b       	std	Y+16, r25	; 0x10
    10a6:	8f 87       	std	Y+15, r24	; 0x0f
    10a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    10aa:	98 89       	ldd	r25, Y+16	; 0x10
    10ac:	01 97       	sbiw	r24, 0x01	; 1
    10ae:	f1 f7       	brne	.-4      	; 0x10ac <LCD_sendCommand+0x2ec>
    10b0:	98 8b       	std	Y+16, r25	; 0x10
    10b2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    10b4:	a2 e3       	ldi	r26, 0x32	; 50
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e2 e3       	ldi	r30, 0x32	; 50
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	8f 7b       	andi	r24, 0xBF	; 191
    10c0:	8c 93       	st	X, r24
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	a0 e8       	ldi	r26, 0x80	; 128
    10c8:	bf e3       	ldi	r27, 0x3F	; 63
    10ca:	8b 87       	std	Y+11, r24	; 0x0b
    10cc:	9c 87       	std	Y+12, r25	; 0x0c
    10ce:	ad 87       	std	Y+13, r26	; 0x0d
    10d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    10d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    10d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	4a e7       	ldi	r20, 0x7A	; 122
    10e0:	53 e4       	ldi	r21, 0x43	; 67
    10e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	8f 83       	std	Y+7, r24	; 0x07
    10ec:	98 87       	std	Y+8, r25	; 0x08
    10ee:	a9 87       	std	Y+9, r26	; 0x09
    10f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10f2:	6f 81       	ldd	r22, Y+7	; 0x07
    10f4:	78 85       	ldd	r23, Y+8	; 0x08
    10f6:	89 85       	ldd	r24, Y+9	; 0x09
    10f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	40 e8       	ldi	r20, 0x80	; 128
    1100:	5f e3       	ldi	r21, 0x3F	; 63
    1102:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1106:	88 23       	and	r24, r24
    1108:	2c f4       	brge	.+10     	; 0x1114 <LCD_sendCommand+0x354>
		__ticks = 1;
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	9e 83       	std	Y+6, r25	; 0x06
    1110:	8d 83       	std	Y+5, r24	; 0x05
    1112:	3f c0       	rjmp	.+126    	; 0x1192 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1114:	6f 81       	ldd	r22, Y+7	; 0x07
    1116:	78 85       	ldd	r23, Y+8	; 0x08
    1118:	89 85       	ldd	r24, Y+9	; 0x09
    111a:	9a 85       	ldd	r25, Y+10	; 0x0a
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	3f ef       	ldi	r19, 0xFF	; 255
    1120:	4f e7       	ldi	r20, 0x7F	; 127
    1122:	57 e4       	ldi	r21, 0x47	; 71
    1124:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1128:	18 16       	cp	r1, r24
    112a:	4c f5       	brge	.+82     	; 0x117e <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    112c:	6b 85       	ldd	r22, Y+11	; 0x0b
    112e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1130:	8d 85       	ldd	r24, Y+13	; 0x0d
    1132:	9e 85       	ldd	r25, Y+14	; 0x0e
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	40 e2       	ldi	r20, 0x20	; 32
    113a:	51 e4       	ldi	r21, 0x41	; 65
    113c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	bc 01       	movw	r22, r24
    1146:	cd 01       	movw	r24, r26
    1148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	9e 83       	std	Y+6, r25	; 0x06
    1152:	8d 83       	std	Y+5, r24	; 0x05
    1154:	0f c0       	rjmp	.+30     	; 0x1174 <LCD_sendCommand+0x3b4>
    1156:	89 e1       	ldi	r24, 0x19	; 25
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	9c 83       	std	Y+4, r25	; 0x04
    115c:	8b 83       	std	Y+3, r24	; 0x03
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	9c 81       	ldd	r25, Y+4	; 0x04
    1162:	01 97       	sbiw	r24, 0x01	; 1
    1164:	f1 f7       	brne	.-4      	; 0x1162 <LCD_sendCommand+0x3a2>
    1166:	9c 83       	std	Y+4, r25	; 0x04
    1168:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    116a:	8d 81       	ldd	r24, Y+5	; 0x05
    116c:	9e 81       	ldd	r25, Y+6	; 0x06
    116e:	01 97       	sbiw	r24, 0x01	; 1
    1170:	9e 83       	std	Y+6, r25	; 0x06
    1172:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1174:	8d 81       	ldd	r24, Y+5	; 0x05
    1176:	9e 81       	ldd	r25, Y+6	; 0x06
    1178:	00 97       	sbiw	r24, 0x00	; 0
    117a:	69 f7       	brne	.-38     	; 0x1156 <LCD_sendCommand+0x396>
    117c:	14 c0       	rjmp	.+40     	; 0x11a6 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    117e:	6f 81       	ldd	r22, Y+7	; 0x07
    1180:	78 85       	ldd	r23, Y+8	; 0x08
    1182:	89 85       	ldd	r24, Y+9	; 0x09
    1184:	9a 85       	ldd	r25, Y+10	; 0x0a
    1186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	9e 83       	std	Y+6, r25	; 0x06
    1190:	8d 83       	std	Y+5, r24	; 0x05
    1192:	8d 81       	ldd	r24, Y+5	; 0x05
    1194:	9e 81       	ldd	r25, Y+6	; 0x06
    1196:	9a 83       	std	Y+2, r25	; 0x02
    1198:	89 83       	std	Y+1, r24	; 0x01
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	9a 81       	ldd	r25, Y+2	; 0x02
    119e:	01 97       	sbiw	r24, 0x01	; 1
    11a0:	f1 f7       	brne	.-4      	; 0x119e <LCD_sendCommand+0x3de>
    11a2:	9a 83       	std	Y+2, r25	; 0x02
    11a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    11a6:	e9 96       	adiw	r28, 0x39	; 57
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	f8 94       	cli
    11ac:	de bf       	out	0x3e, r29	; 62
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	cd bf       	out	0x3d, r28	; 61
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	e9 97       	sbiw	r28, 0x39	; 57
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	de bf       	out	0x3e, r29	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	cd bf       	out	0x3d, r28	; 61
    11cc:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    11ce:	a2 e3       	ldi	r26, 0x32	; 50
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e2 e3       	ldi	r30, 0x32	; 50
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	80 61       	ori	r24, 0x10	; 16
    11da:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    11dc:	a2 e3       	ldi	r26, 0x32	; 50
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	e2 e3       	ldi	r30, 0x32	; 50
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	8f 7d       	andi	r24, 0xDF	; 223
    11e8:	8c 93       	st	X, r24
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	a0 e8       	ldi	r26, 0x80	; 128
    11f0:	bf e3       	ldi	r27, 0x3F	; 63
    11f2:	8d ab       	std	Y+53, r24	; 0x35
    11f4:	9e ab       	std	Y+54, r25	; 0x36
    11f6:	af ab       	std	Y+55, r26	; 0x37
    11f8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11fa:	6d a9       	ldd	r22, Y+53	; 0x35
    11fc:	7e a9       	ldd	r23, Y+54	; 0x36
    11fe:	8f a9       	ldd	r24, Y+55	; 0x37
    1200:	98 ad       	ldd	r25, Y+56	; 0x38
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	4a e7       	ldi	r20, 0x7A	; 122
    1208:	53 e4       	ldi	r21, 0x43	; 67
    120a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	89 ab       	std	Y+49, r24	; 0x31
    1214:	9a ab       	std	Y+50, r25	; 0x32
    1216:	ab ab       	std	Y+51, r26	; 0x33
    1218:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    121a:	69 a9       	ldd	r22, Y+49	; 0x31
    121c:	7a a9       	ldd	r23, Y+50	; 0x32
    121e:	8b a9       	ldd	r24, Y+51	; 0x33
    1220:	9c a9       	ldd	r25, Y+52	; 0x34
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	40 e8       	ldi	r20, 0x80	; 128
    1228:	5f e3       	ldi	r21, 0x3F	; 63
    122a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    122e:	88 23       	and	r24, r24
    1230:	2c f4       	brge	.+10     	; 0x123c <LCD_displayCharacter+0x84>
		__ticks = 1;
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	98 ab       	std	Y+48, r25	; 0x30
    1238:	8f a7       	std	Y+47, r24	; 0x2f
    123a:	3f c0       	rjmp	.+126    	; 0x12ba <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    123c:	69 a9       	ldd	r22, Y+49	; 0x31
    123e:	7a a9       	ldd	r23, Y+50	; 0x32
    1240:	8b a9       	ldd	r24, Y+51	; 0x33
    1242:	9c a9       	ldd	r25, Y+52	; 0x34
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	3f ef       	ldi	r19, 0xFF	; 255
    1248:	4f e7       	ldi	r20, 0x7F	; 127
    124a:	57 e4       	ldi	r21, 0x47	; 71
    124c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1250:	18 16       	cp	r1, r24
    1252:	4c f5       	brge	.+82     	; 0x12a6 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1254:	6d a9       	ldd	r22, Y+53	; 0x35
    1256:	7e a9       	ldd	r23, Y+54	; 0x36
    1258:	8f a9       	ldd	r24, Y+55	; 0x37
    125a:	98 ad       	ldd	r25, Y+56	; 0x38
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	40 e2       	ldi	r20, 0x20	; 32
    1262:	51 e4       	ldi	r21, 0x41	; 65
    1264:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1268:	dc 01       	movw	r26, r24
    126a:	cb 01       	movw	r24, r22
    126c:	bc 01       	movw	r22, r24
    126e:	cd 01       	movw	r24, r26
    1270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	98 ab       	std	Y+48, r25	; 0x30
    127a:	8f a7       	std	Y+47, r24	; 0x2f
    127c:	0f c0       	rjmp	.+30     	; 0x129c <LCD_displayCharacter+0xe4>
    127e:	89 e1       	ldi	r24, 0x19	; 25
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	9e a7       	std	Y+46, r25	; 0x2e
    1284:	8d a7       	std	Y+45, r24	; 0x2d
    1286:	8d a5       	ldd	r24, Y+45	; 0x2d
    1288:	9e a5       	ldd	r25, Y+46	; 0x2e
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	f1 f7       	brne	.-4      	; 0x128a <LCD_displayCharacter+0xd2>
    128e:	9e a7       	std	Y+46, r25	; 0x2e
    1290:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1292:	8f a5       	ldd	r24, Y+47	; 0x2f
    1294:	98 a9       	ldd	r25, Y+48	; 0x30
    1296:	01 97       	sbiw	r24, 0x01	; 1
    1298:	98 ab       	std	Y+48, r25	; 0x30
    129a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    129c:	8f a5       	ldd	r24, Y+47	; 0x2f
    129e:	98 a9       	ldd	r25, Y+48	; 0x30
    12a0:	00 97       	sbiw	r24, 0x00	; 0
    12a2:	69 f7       	brne	.-38     	; 0x127e <LCD_displayCharacter+0xc6>
    12a4:	14 c0       	rjmp	.+40     	; 0x12ce <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a6:	69 a9       	ldd	r22, Y+49	; 0x31
    12a8:	7a a9       	ldd	r23, Y+50	; 0x32
    12aa:	8b a9       	ldd	r24, Y+51	; 0x33
    12ac:	9c a9       	ldd	r25, Y+52	; 0x34
    12ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	98 ab       	std	Y+48, r25	; 0x30
    12b8:	8f a7       	std	Y+47, r24	; 0x2f
    12ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    12bc:	98 a9       	ldd	r25, Y+48	; 0x30
    12be:	9c a7       	std	Y+44, r25	; 0x2c
    12c0:	8b a7       	std	Y+43, r24	; 0x2b
    12c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    12c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	f1 f7       	brne	.-4      	; 0x12c6 <LCD_displayCharacter+0x10e>
    12ca:	9c a7       	std	Y+44, r25	; 0x2c
    12cc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    12ce:	a2 e3       	ldi	r26, 0x32	; 50
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e2 e3       	ldi	r30, 0x32	; 50
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	80 64       	ori	r24, 0x40	; 64
    12da:	8c 93       	st	X, r24
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	a0 e8       	ldi	r26, 0x80	; 128
    12e2:	bf e3       	ldi	r27, 0x3F	; 63
    12e4:	8f a3       	std	Y+39, r24	; 0x27
    12e6:	98 a7       	std	Y+40, r25	; 0x28
    12e8:	a9 a7       	std	Y+41, r26	; 0x29
    12ea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ec:	6f a1       	ldd	r22, Y+39	; 0x27
    12ee:	78 a5       	ldd	r23, Y+40	; 0x28
    12f0:	89 a5       	ldd	r24, Y+41	; 0x29
    12f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	4a e7       	ldi	r20, 0x7A	; 122
    12fa:	53 e4       	ldi	r21, 0x43	; 67
    12fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	8b a3       	std	Y+35, r24	; 0x23
    1306:	9c a3       	std	Y+36, r25	; 0x24
    1308:	ad a3       	std	Y+37, r26	; 0x25
    130a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    130c:	6b a1       	ldd	r22, Y+35	; 0x23
    130e:	7c a1       	ldd	r23, Y+36	; 0x24
    1310:	8d a1       	ldd	r24, Y+37	; 0x25
    1312:	9e a1       	ldd	r25, Y+38	; 0x26
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	40 e8       	ldi	r20, 0x80	; 128
    131a:	5f e3       	ldi	r21, 0x3F	; 63
    131c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1320:	88 23       	and	r24, r24
    1322:	2c f4       	brge	.+10     	; 0x132e <LCD_displayCharacter+0x176>
		__ticks = 1;
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	9a a3       	std	Y+34, r25	; 0x22
    132a:	89 a3       	std	Y+33, r24	; 0x21
    132c:	3f c0       	rjmp	.+126    	; 0x13ac <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    132e:	6b a1       	ldd	r22, Y+35	; 0x23
    1330:	7c a1       	ldd	r23, Y+36	; 0x24
    1332:	8d a1       	ldd	r24, Y+37	; 0x25
    1334:	9e a1       	ldd	r25, Y+38	; 0x26
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	3f ef       	ldi	r19, 0xFF	; 255
    133a:	4f e7       	ldi	r20, 0x7F	; 127
    133c:	57 e4       	ldi	r21, 0x47	; 71
    133e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1342:	18 16       	cp	r1, r24
    1344:	4c f5       	brge	.+82     	; 0x1398 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1346:	6f a1       	ldd	r22, Y+39	; 0x27
    1348:	78 a5       	ldd	r23, Y+40	; 0x28
    134a:	89 a5       	ldd	r24, Y+41	; 0x29
    134c:	9a a5       	ldd	r25, Y+42	; 0x2a
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	40 e2       	ldi	r20, 0x20	; 32
    1354:	51 e4       	ldi	r21, 0x41	; 65
    1356:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	bc 01       	movw	r22, r24
    1360:	cd 01       	movw	r24, r26
    1362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	9a a3       	std	Y+34, r25	; 0x22
    136c:	89 a3       	std	Y+33, r24	; 0x21
    136e:	0f c0       	rjmp	.+30     	; 0x138e <LCD_displayCharacter+0x1d6>
    1370:	89 e1       	ldi	r24, 0x19	; 25
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	98 a3       	std	Y+32, r25	; 0x20
    1376:	8f 8f       	std	Y+31, r24	; 0x1f
    1378:	8f 8d       	ldd	r24, Y+31	; 0x1f
    137a:	98 a1       	ldd	r25, Y+32	; 0x20
    137c:	01 97       	sbiw	r24, 0x01	; 1
    137e:	f1 f7       	brne	.-4      	; 0x137c <LCD_displayCharacter+0x1c4>
    1380:	98 a3       	std	Y+32, r25	; 0x20
    1382:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1384:	89 a1       	ldd	r24, Y+33	; 0x21
    1386:	9a a1       	ldd	r25, Y+34	; 0x22
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	9a a3       	std	Y+34, r25	; 0x22
    138c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    138e:	89 a1       	ldd	r24, Y+33	; 0x21
    1390:	9a a1       	ldd	r25, Y+34	; 0x22
    1392:	00 97       	sbiw	r24, 0x00	; 0
    1394:	69 f7       	brne	.-38     	; 0x1370 <LCD_displayCharacter+0x1b8>
    1396:	14 c0       	rjmp	.+40     	; 0x13c0 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1398:	6b a1       	ldd	r22, Y+35	; 0x23
    139a:	7c a1       	ldd	r23, Y+36	; 0x24
    139c:	8d a1       	ldd	r24, Y+37	; 0x25
    139e:	9e a1       	ldd	r25, Y+38	; 0x26
    13a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a4:	dc 01       	movw	r26, r24
    13a6:	cb 01       	movw	r24, r22
    13a8:	9a a3       	std	Y+34, r25	; 0x22
    13aa:	89 a3       	std	Y+33, r24	; 0x21
    13ac:	89 a1       	ldd	r24, Y+33	; 0x21
    13ae:	9a a1       	ldd	r25, Y+34	; 0x22
    13b0:	9e 8f       	std	Y+30, r25	; 0x1e
    13b2:	8d 8f       	std	Y+29, r24	; 0x1d
    13b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13b8:	01 97       	sbiw	r24, 0x01	; 1
    13ba:	f1 f7       	brne	.-4      	; 0x13b8 <LCD_displayCharacter+0x200>
    13bc:	9e 8f       	std	Y+30, r25	; 0x1e
    13be:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    13c0:	e5 e3       	ldi	r30, 0x35	; 53
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	89 ad       	ldd	r24, Y+57	; 0x39
    13c6:	80 83       	st	Z, r24
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	a0 e8       	ldi	r26, 0x80	; 128
    13ce:	bf e3       	ldi	r27, 0x3F	; 63
    13d0:	89 8f       	std	Y+25, r24	; 0x19
    13d2:	9a 8f       	std	Y+26, r25	; 0x1a
    13d4:	ab 8f       	std	Y+27, r26	; 0x1b
    13d6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d8:	69 8d       	ldd	r22, Y+25	; 0x19
    13da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	4a e7       	ldi	r20, 0x7A	; 122
    13e6:	53 e4       	ldi	r21, 0x43	; 67
    13e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ec:	dc 01       	movw	r26, r24
    13ee:	cb 01       	movw	r24, r22
    13f0:	8d 8b       	std	Y+21, r24	; 0x15
    13f2:	9e 8b       	std	Y+22, r25	; 0x16
    13f4:	af 8b       	std	Y+23, r26	; 0x17
    13f6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13f8:	6d 89       	ldd	r22, Y+21	; 0x15
    13fa:	7e 89       	ldd	r23, Y+22	; 0x16
    13fc:	8f 89       	ldd	r24, Y+23	; 0x17
    13fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	40 e8       	ldi	r20, 0x80	; 128
    1406:	5f e3       	ldi	r21, 0x3F	; 63
    1408:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    140c:	88 23       	and	r24, r24
    140e:	2c f4       	brge	.+10     	; 0x141a <LCD_displayCharacter+0x262>
		__ticks = 1;
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	9c 8b       	std	Y+20, r25	; 0x14
    1416:	8b 8b       	std	Y+19, r24	; 0x13
    1418:	3f c0       	rjmp	.+126    	; 0x1498 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    141a:	6d 89       	ldd	r22, Y+21	; 0x15
    141c:	7e 89       	ldd	r23, Y+22	; 0x16
    141e:	8f 89       	ldd	r24, Y+23	; 0x17
    1420:	98 8d       	ldd	r25, Y+24	; 0x18
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	3f ef       	ldi	r19, 0xFF	; 255
    1426:	4f e7       	ldi	r20, 0x7F	; 127
    1428:	57 e4       	ldi	r21, 0x47	; 71
    142a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    142e:	18 16       	cp	r1, r24
    1430:	4c f5       	brge	.+82     	; 0x1484 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1432:	69 8d       	ldd	r22, Y+25	; 0x19
    1434:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1436:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1438:	9c 8d       	ldd	r25, Y+28	; 0x1c
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	40 e2       	ldi	r20, 0x20	; 32
    1440:	51 e4       	ldi	r21, 0x41	; 65
    1442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	bc 01       	movw	r22, r24
    144c:	cd 01       	movw	r24, r26
    144e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	9c 8b       	std	Y+20, r25	; 0x14
    1458:	8b 8b       	std	Y+19, r24	; 0x13
    145a:	0f c0       	rjmp	.+30     	; 0x147a <LCD_displayCharacter+0x2c2>
    145c:	89 e1       	ldi	r24, 0x19	; 25
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	9a 8b       	std	Y+18, r25	; 0x12
    1462:	89 8b       	std	Y+17, r24	; 0x11
    1464:	89 89       	ldd	r24, Y+17	; 0x11
    1466:	9a 89       	ldd	r25, Y+18	; 0x12
    1468:	01 97       	sbiw	r24, 0x01	; 1
    146a:	f1 f7       	brne	.-4      	; 0x1468 <LCD_displayCharacter+0x2b0>
    146c:	9a 8b       	std	Y+18, r25	; 0x12
    146e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1470:	8b 89       	ldd	r24, Y+19	; 0x13
    1472:	9c 89       	ldd	r25, Y+20	; 0x14
    1474:	01 97       	sbiw	r24, 0x01	; 1
    1476:	9c 8b       	std	Y+20, r25	; 0x14
    1478:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    147a:	8b 89       	ldd	r24, Y+19	; 0x13
    147c:	9c 89       	ldd	r25, Y+20	; 0x14
    147e:	00 97       	sbiw	r24, 0x00	; 0
    1480:	69 f7       	brne	.-38     	; 0x145c <LCD_displayCharacter+0x2a4>
    1482:	14 c0       	rjmp	.+40     	; 0x14ac <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1484:	6d 89       	ldd	r22, Y+21	; 0x15
    1486:	7e 89       	ldd	r23, Y+22	; 0x16
    1488:	8f 89       	ldd	r24, Y+23	; 0x17
    148a:	98 8d       	ldd	r25, Y+24	; 0x18
    148c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	9c 8b       	std	Y+20, r25	; 0x14
    1496:	8b 8b       	std	Y+19, r24	; 0x13
    1498:	8b 89       	ldd	r24, Y+19	; 0x13
    149a:	9c 89       	ldd	r25, Y+20	; 0x14
    149c:	98 8b       	std	Y+16, r25	; 0x10
    149e:	8f 87       	std	Y+15, r24	; 0x0f
    14a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    14a2:	98 89       	ldd	r25, Y+16	; 0x10
    14a4:	01 97       	sbiw	r24, 0x01	; 1
    14a6:	f1 f7       	brne	.-4      	; 0x14a4 <LCD_displayCharacter+0x2ec>
    14a8:	98 8b       	std	Y+16, r25	; 0x10
    14aa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    14ac:	a2 e3       	ldi	r26, 0x32	; 50
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e2 e3       	ldi	r30, 0x32	; 50
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	8f 7b       	andi	r24, 0xBF	; 191
    14b8:	8c 93       	st	X, r24
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	a0 e8       	ldi	r26, 0x80	; 128
    14c0:	bf e3       	ldi	r27, 0x3F	; 63
    14c2:	8b 87       	std	Y+11, r24	; 0x0b
    14c4:	9c 87       	std	Y+12, r25	; 0x0c
    14c6:	ad 87       	std	Y+13, r26	; 0x0d
    14c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    14cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    14ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	4a e7       	ldi	r20, 0x7A	; 122
    14d8:	53 e4       	ldi	r21, 0x43	; 67
    14da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	8f 83       	std	Y+7, r24	; 0x07
    14e4:	98 87       	std	Y+8, r25	; 0x08
    14e6:	a9 87       	std	Y+9, r26	; 0x09
    14e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14ea:	6f 81       	ldd	r22, Y+7	; 0x07
    14ec:	78 85       	ldd	r23, Y+8	; 0x08
    14ee:	89 85       	ldd	r24, Y+9	; 0x09
    14f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	40 e8       	ldi	r20, 0x80	; 128
    14f8:	5f e3       	ldi	r21, 0x3F	; 63
    14fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14fe:	88 23       	and	r24, r24
    1500:	2c f4       	brge	.+10     	; 0x150c <LCD_displayCharacter+0x354>
		__ticks = 1;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	9e 83       	std	Y+6, r25	; 0x06
    1508:	8d 83       	std	Y+5, r24	; 0x05
    150a:	3f c0       	rjmp	.+126    	; 0x158a <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    150c:	6f 81       	ldd	r22, Y+7	; 0x07
    150e:	78 85       	ldd	r23, Y+8	; 0x08
    1510:	89 85       	ldd	r24, Y+9	; 0x09
    1512:	9a 85       	ldd	r25, Y+10	; 0x0a
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	3f ef       	ldi	r19, 0xFF	; 255
    1518:	4f e7       	ldi	r20, 0x7F	; 127
    151a:	57 e4       	ldi	r21, 0x47	; 71
    151c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1520:	18 16       	cp	r1, r24
    1522:	4c f5       	brge	.+82     	; 0x1576 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1524:	6b 85       	ldd	r22, Y+11	; 0x0b
    1526:	7c 85       	ldd	r23, Y+12	; 0x0c
    1528:	8d 85       	ldd	r24, Y+13	; 0x0d
    152a:	9e 85       	ldd	r25, Y+14	; 0x0e
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	40 e2       	ldi	r20, 0x20	; 32
    1532:	51 e4       	ldi	r21, 0x41	; 65
    1534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	bc 01       	movw	r22, r24
    153e:	cd 01       	movw	r24, r26
    1540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	9e 83       	std	Y+6, r25	; 0x06
    154a:	8d 83       	std	Y+5, r24	; 0x05
    154c:	0f c0       	rjmp	.+30     	; 0x156c <LCD_displayCharacter+0x3b4>
    154e:	89 e1       	ldi	r24, 0x19	; 25
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	9c 83       	std	Y+4, r25	; 0x04
    1554:	8b 83       	std	Y+3, r24	; 0x03
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	9c 81       	ldd	r25, Y+4	; 0x04
    155a:	01 97       	sbiw	r24, 0x01	; 1
    155c:	f1 f7       	brne	.-4      	; 0x155a <LCD_displayCharacter+0x3a2>
    155e:	9c 83       	std	Y+4, r25	; 0x04
    1560:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1562:	8d 81       	ldd	r24, Y+5	; 0x05
    1564:	9e 81       	ldd	r25, Y+6	; 0x06
    1566:	01 97       	sbiw	r24, 0x01	; 1
    1568:	9e 83       	std	Y+6, r25	; 0x06
    156a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    156c:	8d 81       	ldd	r24, Y+5	; 0x05
    156e:	9e 81       	ldd	r25, Y+6	; 0x06
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	69 f7       	brne	.-38     	; 0x154e <LCD_displayCharacter+0x396>
    1574:	14 c0       	rjmp	.+40     	; 0x159e <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1576:	6f 81       	ldd	r22, Y+7	; 0x07
    1578:	78 85       	ldd	r23, Y+8	; 0x08
    157a:	89 85       	ldd	r24, Y+9	; 0x09
    157c:	9a 85       	ldd	r25, Y+10	; 0x0a
    157e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	9e 83       	std	Y+6, r25	; 0x06
    1588:	8d 83       	std	Y+5, r24	; 0x05
    158a:	8d 81       	ldd	r24, Y+5	; 0x05
    158c:	9e 81       	ldd	r25, Y+6	; 0x06
    158e:	9a 83       	std	Y+2, r25	; 0x02
    1590:	89 83       	std	Y+1, r24	; 0x01
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	9a 81       	ldd	r25, Y+2	; 0x02
    1596:	01 97       	sbiw	r24, 0x01	; 1
    1598:	f1 f7       	brne	.-4      	; 0x1596 <LCD_displayCharacter+0x3de>
    159a:	9a 83       	std	Y+2, r25	; 0x02
    159c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    159e:	e9 96       	adiw	r28, 0x39	; 57
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	de bf       	out	0x3e, r29	; 62
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	cd bf       	out	0x3d, r28	; 61
    15aa:	cf 91       	pop	r28
    15ac:	df 91       	pop	r29
    15ae:	08 95       	ret

000015b0 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    15b0:	df 93       	push	r29
    15b2:	cf 93       	push	r28
    15b4:	00 d0       	rcall	.+0      	; 0x15b6 <LCD_displayString+0x6>
    15b6:	0f 92       	push	r0
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	9b 83       	std	Y+3, r25	; 0x03
    15be:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    15c0:	19 82       	std	Y+1, r1	; 0x01
    15c2:	0e c0       	rjmp	.+28     	; 0x15e0 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	9b 81       	ldd	r25, Y+3	; 0x03
    15ce:	fc 01       	movw	r30, r24
    15d0:	e2 0f       	add	r30, r18
    15d2:	f3 1f       	adc	r31, r19
    15d4:	80 81       	ld	r24, Z
    15d6:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <LCD_displayCharacter>
		i++;
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	8f 5f       	subi	r24, 0xFF	; 255
    15de:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	9b 81       	ldd	r25, Y+3	; 0x03
    15ea:	fc 01       	movw	r30, r24
    15ec:	e2 0f       	add	r30, r18
    15ee:	f3 1f       	adc	r31, r19
    15f0:	80 81       	ld	r24, Z
    15f2:	88 23       	and	r24, r24
    15f4:	39 f7       	brne	.-50     	; 0x15c4 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	00 d0       	rcall	.+0      	; 0x1608 <LCD_goToRowColumn+0x6>
    1608:	00 d0       	rcall	.+0      	; 0x160a <LCD_goToRowColumn+0x8>
    160a:	0f 92       	push	r0
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
    1610:	8a 83       	std	Y+2, r24	; 0x02
    1612:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	3d 83       	std	Y+5, r19	; 0x05
    161c:	2c 83       	std	Y+4, r18	; 0x04
    161e:	8c 81       	ldd	r24, Y+4	; 0x04
    1620:	9d 81       	ldd	r25, Y+5	; 0x05
    1622:	81 30       	cpi	r24, 0x01	; 1
    1624:	91 05       	cpc	r25, r1
    1626:	c1 f0       	breq	.+48     	; 0x1658 <LCD_goToRowColumn+0x56>
    1628:	2c 81       	ldd	r18, Y+4	; 0x04
    162a:	3d 81       	ldd	r19, Y+5	; 0x05
    162c:	22 30       	cpi	r18, 0x02	; 2
    162e:	31 05       	cpc	r19, r1
    1630:	2c f4       	brge	.+10     	; 0x163c <LCD_goToRowColumn+0x3a>
    1632:	8c 81       	ldd	r24, Y+4	; 0x04
    1634:	9d 81       	ldd	r25, Y+5	; 0x05
    1636:	00 97       	sbiw	r24, 0x00	; 0
    1638:	61 f0       	breq	.+24     	; 0x1652 <LCD_goToRowColumn+0x50>
    163a:	19 c0       	rjmp	.+50     	; 0x166e <LCD_goToRowColumn+0x6c>
    163c:	2c 81       	ldd	r18, Y+4	; 0x04
    163e:	3d 81       	ldd	r19, Y+5	; 0x05
    1640:	22 30       	cpi	r18, 0x02	; 2
    1642:	31 05       	cpc	r19, r1
    1644:	69 f0       	breq	.+26     	; 0x1660 <LCD_goToRowColumn+0x5e>
    1646:	8c 81       	ldd	r24, Y+4	; 0x04
    1648:	9d 81       	ldd	r25, Y+5	; 0x05
    164a:	83 30       	cpi	r24, 0x03	; 3
    164c:	91 05       	cpc	r25, r1
    164e:	61 f0       	breq	.+24     	; 0x1668 <LCD_goToRowColumn+0x66>
    1650:	0e c0       	rjmp	.+28     	; 0x166e <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	89 83       	std	Y+1, r24	; 0x01
    1656:	0b c0       	rjmp	.+22     	; 0x166e <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	80 5c       	subi	r24, 0xC0	; 192
    165c:	89 83       	std	Y+1, r24	; 0x01
    165e:	07 c0       	rjmp	.+14     	; 0x166e <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	80 5f       	subi	r24, 0xF0	; 240
    1664:	89 83       	std	Y+1, r24	; 0x01
    1666:	03 c0       	rjmp	.+6      	; 0x166e <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	80 5b       	subi	r24, 0xB0	; 176
    166c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	80 68       	ori	r24, 0x80	; 128
    1672:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <LCD_sendCommand>
}
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	cf 91       	pop	r28
    1682:	df 91       	pop	r29
    1684:	08 95       	ret

00001686 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1686:	df 93       	push	r29
    1688:	cf 93       	push	r28
    168a:	00 d0       	rcall	.+0      	; 0x168c <LCD_displayStringRowColumn+0x6>
    168c:	00 d0       	rcall	.+0      	; 0x168e <LCD_displayStringRowColumn+0x8>
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	6a 83       	std	Y+2, r22	; 0x02
    1696:	5c 83       	std	Y+4, r21	; 0x04
    1698:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	6a 81       	ldd	r22, Y+2	; 0x02
    169e:	0e 94 01 0b 	call	0x1602	; 0x1602 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	9c 81       	ldd	r25, Y+4	; 0x04
    16a6:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <LCD_displayString>
}
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	cf 91       	pop	r28
    16b4:	df 91       	pop	r29
    16b6:	08 95       	ret

000016b8 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    16b8:	df 93       	push	r29
    16ba:	cf 93       	push	r28
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
    16c0:	62 97       	sbiw	r28, 0x12	; 18
    16c2:	0f b6       	in	r0, 0x3f	; 63
    16c4:	f8 94       	cli
    16c6:	de bf       	out	0x3e, r29	; 62
    16c8:	0f be       	out	0x3f, r0	; 63
    16ca:	cd bf       	out	0x3d, r28	; 61
    16cc:	9a 8b       	std	Y+18, r25	; 0x12
    16ce:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    16d0:	89 89       	ldd	r24, Y+17	; 0x11
    16d2:	9a 89       	ldd	r25, Y+18	; 0x12
    16d4:	9e 01       	movw	r18, r28
    16d6:	2f 5f       	subi	r18, 0xFF	; 255
    16d8:	3f 4f       	sbci	r19, 0xFF	; 255
    16da:	b9 01       	movw	r22, r18
    16dc:	4a e0       	ldi	r20, 0x0A	; 10
    16de:	50 e0       	ldi	r21, 0x00	; 0
    16e0:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <itoa>
   LCD_displayString(buff);
    16e4:	ce 01       	movw	r24, r28
    16e6:	01 96       	adiw	r24, 0x01	; 1
    16e8:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <LCD_displayString>
}
    16ec:	62 96       	adiw	r28, 0x12	; 18
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	f8 94       	cli
    16f2:	de bf       	out	0x3e, r29	; 62
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	cd bf       	out	0x3d, r28	; 61
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	08 95       	ret

000016fe <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <LCD_sendCommand>
}
    170c:	cf 91       	pop	r28
    170e:	df 91       	pop	r29
    1710:	08 95       	ret

00001712 <MOTOR_init>:

#include"motor.h"


void MOTOR_init()
{
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRB, IN1);
    171a:	a7 e3       	ldi	r26, 0x37	; 55
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	e7 e3       	ldi	r30, 0x37	; 55
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	84 60       	ori	r24, 0x04	; 4
    1726:	8c 93       	st	X, r24
	SET_BIT(DDRB, IN2);
    1728:	a7 e3       	ldi	r26, 0x37	; 55
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	e7 e3       	ldi	r30, 0x37	; 55
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	82 60       	ori	r24, 0x02	; 2
    1734:	8c 93       	st	X, r24

}
    1736:	cf 91       	pop	r28
    1738:	df 91       	pop	r29
    173a:	08 95       	ret

0000173c <MOTOR_ON_OFF>:

void MOTOR_ON_OFF()
{
    173c:	df 93       	push	r29
    173e:	cf 93       	push	r28
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
	if(BIT_IS_SET(PORTB, IN1) || BIT_IS_SET(PORTB, IN2) )
    1744:	e8 e3       	ldi	r30, 0x38	; 56
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	88 2f       	mov	r24, r24
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	84 70       	andi	r24, 0x04	; 4
    1750:	90 70       	andi	r25, 0x00	; 0
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	49 f4       	brne	.+18     	; 0x1768 <MOTOR_ON_OFF+0x2c>
    1756:	e8 e3       	ldi	r30, 0x38	; 56
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	88 2f       	mov	r24, r24
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	82 70       	andi	r24, 0x02	; 2
    1762:	90 70       	andi	r25, 0x00	; 0
    1764:	00 97       	sbiw	r24, 0x00	; 0
    1766:	19 f0       	breq	.+6      	; 0x176e <MOTOR_ON_OFF+0x32>
	{
		MOTOR_stop();
    1768:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <MOTOR_stop>
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <MOTOR_ON_OFF+0x36>
	}
	else
	{
		MOTOR_start();
    176e:	0e 94 bc 0b 	call	0x1778	; 0x1778 <MOTOR_start>
	}
}
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	08 95       	ret

00001778 <MOTOR_start>:


void MOTOR_start()
{
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(PORTB, IN1);
    1780:	a8 e3       	ldi	r26, 0x38	; 56
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e8 e3       	ldi	r30, 0x38	; 56
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	84 60       	ori	r24, 0x04	; 4
    178c:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB, IN2);
    178e:	a8 e3       	ldi	r26, 0x38	; 56
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	e8 e3       	ldi	r30, 0x38	; 56
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	8d 7f       	andi	r24, 0xFD	; 253
    179a:	8c 93       	st	X, r24
}
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <MOTOR_stop>:


void MOTOR_stop()
{
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(PORTB, IN1);
    17aa:	a8 e3       	ldi	r26, 0x38	; 56
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e8 e3       	ldi	r30, 0x38	; 56
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	8b 7f       	andi	r24, 0xFB	; 251
    17b6:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB, IN2);
    17b8:	a8 e3       	ldi	r26, 0x38	; 56
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	e8 e3       	ldi	r30, 0x38	; 56
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	8d 7f       	andi	r24, 0xFD	; 253
    17c4:	8c 93       	st	X, r24
}
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	08 95       	ret

000017cc <MOTOR_reverse>:

void MOTOR_reverse()
{
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
	TOGGLE_BIT(PORTB, IN1);
    17d4:	a8 e3       	ldi	r26, 0x38	; 56
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e8 e3       	ldi	r30, 0x38	; 56
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	90 81       	ld	r25, Z
    17de:	84 e0       	ldi	r24, 0x04	; 4
    17e0:	89 27       	eor	r24, r25
    17e2:	8c 93       	st	X, r24
	TOGGLE_BIT(PORTB, IN2);
    17e4:	a8 e3       	ldi	r26, 0x38	; 56
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	e8 e3       	ldi	r30, 0x38	; 56
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	90 81       	ld	r25, Z
    17ee:	82 e0       	ldi	r24, 0x02	; 2
    17f0:	89 27       	eor	r24, r25
    17f2:	8c 93       	st	X, r24

}
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	08 95       	ret

000017fa <INT1_init>:
#include "common_macros.h"
#include "std_types.h"
#include "micro_config.h"

void INT1_init( void )
{
    17fa:	df 93       	push	r29
    17fc:	cf 93       	push	r28
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
	GICR  |= ( 1<<INT1 ) ;                   // enable interrupt 0
    1802:	ab e5       	ldi	r26, 0x5B	; 91
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	eb e5       	ldi	r30, 0x5B	; 91
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	80 68       	ori	r24, 0x80	; 128
    180e:	8c 93       	st	X, r24
	MCUCR |= ( 1<<ISC11 ) | ( 1<<ISC10 ) ;   // interrupt request at rising edge
    1810:	a5 e5       	ldi	r26, 0x55	; 85
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	e5 e5       	ldi	r30, 0x55	; 85
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	8c 60       	ori	r24, 0x0C	; 12
    181c:	8c 93       	st	X, r24
	DDRD  &= ~( 1<<PD3 ) ;                   // configure pin 3 in PORTD as input pin
    181e:	a1 e3       	ldi	r26, 0x31	; 49
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	e1 e3       	ldi	r30, 0x31	; 49
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	87 7f       	andi	r24, 0xF7	; 247
    182a:	8c 93       	st	X, r24
}
    182c:	cf 91       	pop	r28
    182e:	df 91       	pop	r29
    1830:	08 95       	ret

00001832 <INT0_init>:

void INT0_init( void )
{
    1832:	df 93       	push	r29
    1834:	cf 93       	push	r28
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
	GICR  |= ( 1<<INT0 ) ;                   // enable interrupt 0
    183a:	ab e5       	ldi	r26, 0x5B	; 91
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	eb e5       	ldi	r30, 0x5B	; 91
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	80 64       	ori	r24, 0x40	; 64
    1846:	8c 93       	st	X, r24
	MCUCR |= ( 1<<ISC01 )|(1<<ISC00)  ;   // interrupt request at rising edge
    1848:	a5 e5       	ldi	r26, 0x55	; 85
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	e5 e5       	ldi	r30, 0x55	; 85
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	83 60       	ori	r24, 0x03	; 3
    1854:	8c 93       	st	X, r24
	DDRD  &= ~( 1<<PD2 ) ;                   // configure pin 3 in PORTD as input pin
    1856:	a1 e3       	ldi	r26, 0x31	; 49
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e1 e3       	ldi	r30, 0x31	; 49
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	8b 7f       	andi	r24, 0xFB	; 251
    1862:	8c 93       	st	X, r24
}
    1864:	cf 91       	pop	r28
    1866:	df 91       	pop	r29
    1868:	08 95       	ret

0000186a <__vector_2>:

ISR(INT1_vect)
{
    186a:	1f 92       	push	r1
    186c:	0f 92       	push	r0
    186e:	0f b6       	in	r0, 0x3f	; 63
    1870:	0f 92       	push	r0
    1872:	11 24       	eor	r1, r1
    1874:	2f 93       	push	r18
    1876:	3f 93       	push	r19
    1878:	4f 93       	push	r20
    187a:	5f 93       	push	r21
    187c:	6f 93       	push	r22
    187e:	7f 93       	push	r23
    1880:	8f 93       	push	r24
    1882:	9f 93       	push	r25
    1884:	af 93       	push	r26
    1886:	bf 93       	push	r27
    1888:	ef 93       	push	r30
    188a:	ff 93       	push	r31
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
	MOTOR_reverse();
    1894:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <MOTOR_reverse>
}
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	ff 91       	pop	r31
    189e:	ef 91       	pop	r30
    18a0:	bf 91       	pop	r27
    18a2:	af 91       	pop	r26
    18a4:	9f 91       	pop	r25
    18a6:	8f 91       	pop	r24
    18a8:	7f 91       	pop	r23
    18aa:	6f 91       	pop	r22
    18ac:	5f 91       	pop	r21
    18ae:	4f 91       	pop	r20
    18b0:	3f 91       	pop	r19
    18b2:	2f 91       	pop	r18
    18b4:	0f 90       	pop	r0
    18b6:	0f be       	out	0x3f, r0	; 63
    18b8:	0f 90       	pop	r0
    18ba:	1f 90       	pop	r1
    18bc:	18 95       	reti

000018be <__vector_1>:

ISR(INT0_vect)
{
    18be:	1f 92       	push	r1
    18c0:	0f 92       	push	r0
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	0f 92       	push	r0
    18c6:	11 24       	eor	r1, r1
    18c8:	2f 93       	push	r18
    18ca:	3f 93       	push	r19
    18cc:	4f 93       	push	r20
    18ce:	5f 93       	push	r21
    18d0:	6f 93       	push	r22
    18d2:	7f 93       	push	r23
    18d4:	8f 93       	push	r24
    18d6:	9f 93       	push	r25
    18d8:	af 93       	push	r26
    18da:	bf 93       	push	r27
    18dc:	ef 93       	push	r30
    18de:	ff 93       	push	r31
    18e0:	df 93       	push	r29
    18e2:	cf 93       	push	r28
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
	MOTOR_ON_OFF();
    18e8:	0e 94 9e 0b 	call	0x173c	; 0x173c <MOTOR_ON_OFF>
}
    18ec:	cf 91       	pop	r28
    18ee:	df 91       	pop	r29
    18f0:	ff 91       	pop	r31
    18f2:	ef 91       	pop	r30
    18f4:	bf 91       	pop	r27
    18f6:	af 91       	pop	r26
    18f8:	9f 91       	pop	r25
    18fa:	8f 91       	pop	r24
    18fc:	7f 91       	pop	r23
    18fe:	6f 91       	pop	r22
    1900:	5f 91       	pop	r21
    1902:	4f 91       	pop	r20
    1904:	3f 91       	pop	r19
    1906:	2f 91       	pop	r18
    1908:	0f 90       	pop	r0
    190a:	0f be       	out	0x3f, r0	; 63
    190c:	0f 90       	pop	r0
    190e:	1f 90       	pop	r1
    1910:	18 95       	reti

00001912 <main>:


int main(void)
{
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
    191a:	68 97       	sbiw	r28, 0x18	; 24
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	f8 94       	cli
    1920:	de bf       	out	0x3e, r29	; 62
    1922:	0f be       	out	0x3f, r0	; 63
    1924:	cd bf       	out	0x3d, r28	; 61
	SREG|= (1<<7);
    1926:	af e5       	ldi	r26, 0x5F	; 95
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	ef e5       	ldi	r30, 0x5F	; 95
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	80 68       	ori	r24, 0x80	; 128
    1932:	8c 93       	st	X, r24
	INT1_init();
    1934:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <INT1_init>
	INT0_init();
    1938:	0e 94 19 0c 	call	0x1832	; 0x1832 <INT0_init>
	uint16 comp_value;
	uint16 res_value;
	ADC_ConfigType ADC_config = {EXTERNAL_REF, FREE_RUNNING, POLLING, _8, RIGHT_ADJUST};
    193c:	ce 01       	movw	r24, r28
    193e:	05 96       	adiw	r24, 0x05	; 5
    1940:	98 8b       	std	Y+16, r25	; 0x10
    1942:	8f 87       	std	Y+15, r24	; 0x0f
    1944:	ea e7       	ldi	r30, 0x7A	; 122
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	fa 8b       	std	Y+18, r31	; 0x12
    194a:	e9 8b       	std	Y+17, r30	; 0x11
    194c:	f5 e0       	ldi	r31, 0x05	; 5
    194e:	fb 8b       	std	Y+19, r31	; 0x13
    1950:	e9 89       	ldd	r30, Y+17	; 0x11
    1952:	fa 89       	ldd	r31, Y+18	; 0x12
    1954:	00 80       	ld	r0, Z
    1956:	89 89       	ldd	r24, Y+17	; 0x11
    1958:	9a 89       	ldd	r25, Y+18	; 0x12
    195a:	01 96       	adiw	r24, 0x01	; 1
    195c:	9a 8b       	std	Y+18, r25	; 0x12
    195e:	89 8b       	std	Y+17, r24	; 0x11
    1960:	ef 85       	ldd	r30, Y+15	; 0x0f
    1962:	f8 89       	ldd	r31, Y+16	; 0x10
    1964:	00 82       	st	Z, r0
    1966:	8f 85       	ldd	r24, Y+15	; 0x0f
    1968:	98 89       	ldd	r25, Y+16	; 0x10
    196a:	01 96       	adiw	r24, 0x01	; 1
    196c:	98 8b       	std	Y+16, r25	; 0x10
    196e:	8f 87       	std	Y+15, r24	; 0x0f
    1970:	9b 89       	ldd	r25, Y+19	; 0x13
    1972:	91 50       	subi	r25, 0x01	; 1
    1974:	9b 8b       	std	Y+19, r25	; 0x13
    1976:	eb 89       	ldd	r30, Y+19	; 0x13
    1978:	ee 23       	and	r30, r30
    197a:	51 f7       	brne	.-44     	; 0x1950 <main+0x3e>
	Timer0_ConfigType Timer0_config = {PWM_MODE, 0, F_CPU_8, 0, 128  };
    197c:	ce 01       	movw	r24, r28
    197e:	0a 96       	adiw	r24, 0x0a	; 10
    1980:	9d 8b       	std	Y+21, r25	; 0x15
    1982:	8c 8b       	std	Y+20, r24	; 0x14
    1984:	e5 e7       	ldi	r30, 0x75	; 117
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	ff 8b       	std	Y+23, r31	; 0x17
    198a:	ee 8b       	std	Y+22, r30	; 0x16
    198c:	f5 e0       	ldi	r31, 0x05	; 5
    198e:	f8 8f       	std	Y+24, r31	; 0x18
    1990:	ee 89       	ldd	r30, Y+22	; 0x16
    1992:	ff 89       	ldd	r31, Y+23	; 0x17
    1994:	00 80       	ld	r0, Z
    1996:	8e 89       	ldd	r24, Y+22	; 0x16
    1998:	9f 89       	ldd	r25, Y+23	; 0x17
    199a:	01 96       	adiw	r24, 0x01	; 1
    199c:	9f 8b       	std	Y+23, r25	; 0x17
    199e:	8e 8b       	std	Y+22, r24	; 0x16
    19a0:	ec 89       	ldd	r30, Y+20	; 0x14
    19a2:	fd 89       	ldd	r31, Y+21	; 0x15
    19a4:	00 82       	st	Z, r0
    19a6:	8c 89       	ldd	r24, Y+20	; 0x14
    19a8:	9d 89       	ldd	r25, Y+21	; 0x15
    19aa:	01 96       	adiw	r24, 0x01	; 1
    19ac:	9d 8b       	std	Y+21, r25	; 0x15
    19ae:	8c 8b       	std	Y+20, r24	; 0x14
    19b0:	98 8d       	ldd	r25, Y+24	; 0x18
    19b2:	91 50       	subi	r25, 0x01	; 1
    19b4:	98 8f       	std	Y+24, r25	; 0x18
    19b6:	e8 8d       	ldd	r30, Y+24	; 0x18
    19b8:	ee 23       	and	r30, r30
    19ba:	51 f7       	brne	.-44     	; 0x1990 <main+0x7e>
	ADC_init(&ADC_config);
    19bc:	ce 01       	movw	r24, r28
    19be:	05 96       	adiw	r24, 0x05	; 5
    19c0:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <ADC_init>
	Timer0_init(&Timer0_config);
    19c4:	ce 01       	movw	r24, r28
    19c6:	0a 96       	adiw	r24, 0x0a	; 10
    19c8:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <Timer0_init>
	MOTOR_init();
    19cc:	0e 94 89 0b 	call	0x1712	; 0x1712 <MOTOR_init>
	MOTOR_start();
    19d0:	0e 94 bc 0b 	call	0x1778	; 0x1778 <MOTOR_start>
	LCD_init();
    19d4:	0e 94 c5 06 	call	0xd8a	; 0xd8a <LCD_init>
	LCD_clearScreen();
    19d8:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <LCD_clearScreen>
	LCD_displayString("ADC Value = ");
    19dc:	80 e6       	ldi	r24, 0x60	; 96
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <LCD_displayString>


	while(1)
	{
		res_value = ADC_readChannel(0, &ADC_config) ;
    19e4:	9e 01       	movw	r18, r28
    19e6:	2b 5f       	subi	r18, 0xFB	; 251
    19e8:	3f 4f       	sbci	r19, 0xFF	; 255
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	b9 01       	movw	r22, r18
    19ee:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <ADC_readChannel>
    19f2:	9a 83       	std	Y+2, r25	; 0x02
    19f4:	89 83       	std	Y+1, r24	; 0x01
		comp_value = res_value /4;
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
    19f8:	9a 81       	ldd	r25, Y+2	; 0x02
    19fa:	96 95       	lsr	r25
    19fc:	87 95       	ror	r24
    19fe:	96 95       	lsr	r25
    1a00:	87 95       	ror	r24
    1a02:	9c 83       	std	Y+4, r25	; 0x04
    1a04:	8b 83       	std	Y+3, r24	; 0x03
		Timer0_config.DutyCycle = comp_value;
    1a06:	8b 81       	ldd	r24, Y+3	; 0x03
    1a08:	8e 87       	std	Y+14, r24	; 0x0e
		Timer0_init(&Timer0_config);
    1a0a:	ce 01       	movw	r24, r28
    1a0c:	0a 96       	adiw	r24, 0x0a	; 10
    1a0e:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <Timer0_init>
		LCD_goToRowColumn(0,12); /* display the number every time at this position */
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	6c e0       	ldi	r22, 0x0C	; 12
    1a16:	0e 94 01 0b 	call	0x1602	; 0x1602 <LCD_goToRowColumn>
		LCD_intgerToString(res_value); /* display the ADC value on LCD screen */
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1e:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <LCD_intgerToString>
    1a22:	e0 cf       	rjmp	.-64     	; 0x19e4 <main+0xd2>

00001a24 <__vector_9>:
static volatile void (*g_callBackPtr_CMP)(void) = NULL_PTR;



ISR(TIMER0_OVF_vect)
{
    1a24:	1f 92       	push	r1
    1a26:	0f 92       	push	r0
    1a28:	0f b6       	in	r0, 0x3f	; 63
    1a2a:	0f 92       	push	r0
    1a2c:	11 24       	eor	r1, r1
    1a2e:	2f 93       	push	r18
    1a30:	3f 93       	push	r19
    1a32:	4f 93       	push	r20
    1a34:	5f 93       	push	r21
    1a36:	6f 93       	push	r22
    1a38:	7f 93       	push	r23
    1a3a:	8f 93       	push	r24
    1a3c:	9f 93       	push	r25
    1a3e:	af 93       	push	r26
    1a40:	bf 93       	push	r27
    1a42:	ef 93       	push	r30
    1a44:	ff 93       	push	r31
    1a46:	df 93       	push	r29
    1a48:	cf 93       	push	r28
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_OVF != NULL_PTR)
    1a4e:	80 91 86 00 	lds	r24, 0x0086
    1a52:	90 91 87 00 	lds	r25, 0x0087
    1a56:	00 97       	sbiw	r24, 0x00	; 0
    1a58:	29 f0       	breq	.+10     	; 0x1a64 <__vector_9+0x40>
	{
		(*g_callBackPtr_OVF)(); /* another method to call the function using pointer to function g_callBackPtr_OVF(); */
    1a5a:	e0 91 86 00 	lds	r30, 0x0086
    1a5e:	f0 91 87 00 	lds	r31, 0x0087
    1a62:	09 95       	icall
	}
}
    1a64:	cf 91       	pop	r28
    1a66:	df 91       	pop	r29
    1a68:	ff 91       	pop	r31
    1a6a:	ef 91       	pop	r30
    1a6c:	bf 91       	pop	r27
    1a6e:	af 91       	pop	r26
    1a70:	9f 91       	pop	r25
    1a72:	8f 91       	pop	r24
    1a74:	7f 91       	pop	r23
    1a76:	6f 91       	pop	r22
    1a78:	5f 91       	pop	r21
    1a7a:	4f 91       	pop	r20
    1a7c:	3f 91       	pop	r19
    1a7e:	2f 91       	pop	r18
    1a80:	0f 90       	pop	r0
    1a82:	0f be       	out	0x3f, r0	; 63
    1a84:	0f 90       	pop	r0
    1a86:	1f 90       	pop	r1
    1a88:	18 95       	reti

00001a8a <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    1a8a:	1f 92       	push	r1
    1a8c:	0f 92       	push	r0
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	0f 92       	push	r0
    1a92:	11 24       	eor	r1, r1
    1a94:	2f 93       	push	r18
    1a96:	3f 93       	push	r19
    1a98:	4f 93       	push	r20
    1a9a:	5f 93       	push	r21
    1a9c:	6f 93       	push	r22
    1a9e:	7f 93       	push	r23
    1aa0:	8f 93       	push	r24
    1aa2:	9f 93       	push	r25
    1aa4:	af 93       	push	r26
    1aa6:	bf 93       	push	r27
    1aa8:	ef 93       	push	r30
    1aaa:	ff 93       	push	r31
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_CMP != NULL_PTR)
    1ab4:	80 91 88 00 	lds	r24, 0x0088
    1ab8:	90 91 89 00 	lds	r25, 0x0089
    1abc:	00 97       	sbiw	r24, 0x00	; 0
    1abe:	29 f0       	breq	.+10     	; 0x1aca <__vector_19+0x40>
	{
		(*g_callBackPtr_CMP)(); /* another method to call the function using pointer to function g_callBackPtr_CMP(); */
    1ac0:	e0 91 88 00 	lds	r30, 0x0088
    1ac4:	f0 91 89 00 	lds	r31, 0x0089
    1ac8:	09 95       	icall
	}
}
    1aca:	cf 91       	pop	r28
    1acc:	df 91       	pop	r29
    1ace:	ff 91       	pop	r31
    1ad0:	ef 91       	pop	r30
    1ad2:	bf 91       	pop	r27
    1ad4:	af 91       	pop	r26
    1ad6:	9f 91       	pop	r25
    1ad8:	8f 91       	pop	r24
    1ada:	7f 91       	pop	r23
    1adc:	6f 91       	pop	r22
    1ade:	5f 91       	pop	r21
    1ae0:	4f 91       	pop	r20
    1ae2:	3f 91       	pop	r19
    1ae4:	2f 91       	pop	r18
    1ae6:	0f 90       	pop	r0
    1ae8:	0f be       	out	0x3f, r0	; 63
    1aea:	0f 90       	pop	r0
    1aec:	1f 90       	pop	r1
    1aee:	18 95       	reti

00001af0 <Timer0_init>:



void Timer0_init (const Timer0_ConfigType * ConfigPtr)
{
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	00 d0       	rcall	.+0      	; 0x1af6 <Timer0_init+0x6>
    1af6:	cd b7       	in	r28, 0x3d	; 61
    1af8:	de b7       	in	r29, 0x3e	; 62
    1afa:	9a 83       	std	Y+2, r25	; 0x02
    1afc:	89 83       	std	Y+1, r24	; 0x01
	if (ConfigPtr->Mode == NORMAL_MODE)
    1afe:	e9 81       	ldd	r30, Y+1	; 0x01
    1b00:	fa 81       	ldd	r31, Y+2	; 0x02
    1b02:	80 81       	ld	r24, Z
    1b04:	88 23       	and	r24, r24
    1b06:	09 f5       	brne	.+66     	; 0x1b4a <Timer0_init+0x5a>
	{
		TCNT0 = ConfigPtr->InitialValue;
    1b08:	a2 e5       	ldi	r26, 0x52	; 82
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b0e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b10:	81 81       	ldd	r24, Z+1	; 0x01
    1b12:	8c 93       	st	X, r24
		SET_BIT(TIMSK,TOIE0);                        // overflow INT Enable
    1b14:	a9 e5       	ldi	r26, 0x59	; 89
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	e9 e5       	ldi	r30, 0x59	; 89
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	81 60       	ori	r24, 0x01	; 1
    1b20:	8c 93       	st	X, r24
		/* Configure the timer control register
			 * 1. Non PWM mode FOC0=1
			 * 2. Normal Mode WGM01=0 & WGM00=0
			 * 3. Normal Mode COM00=0 & COM01=0
			 */
		SET_BIT (TCCR0,FOC0);
    1b22:	a3 e5       	ldi	r26, 0x53	; 83
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e3 e5       	ldi	r30, 0x53	; 83
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	80 68       	ori	r24, 0x80	; 128
    1b2e:	8c 93       	st	X, r24
		TCCR0 =(TCCR0&0xF8) | (ConfigPtr->Clock);  // clock
    1b30:	a3 e5       	ldi	r26, 0x53	; 83
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e3 e5       	ldi	r30, 0x53	; 83
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	98 2f       	mov	r25, r24
    1b3c:	98 7f       	andi	r25, 0xF8	; 248
    1b3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b40:	fa 81       	ldd	r31, Y+2	; 0x02
    1b42:	82 81       	ldd	r24, Z+2	; 0x02
    1b44:	89 2b       	or	r24, r25
    1b46:	8c 93       	st	X, r24
    1b48:	6c c0       	rjmp	.+216    	; 0x1c22 <Timer0_init+0x132>
	}


	else if (ConfigPtr->Mode == CTC_MODE)
    1b4a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b4c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b4e:	80 81       	ld	r24, Z
    1b50:	81 30       	cpi	r24, 0x01	; 1
    1b52:	71 f5       	brne	.+92     	; 0x1bb0 <Timer0_init+0xc0>
	{
		TCNT0 = ConfigPtr->InitialValue;
    1b54:	a2 e5       	ldi	r26, 0x52	; 82
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	e9 81       	ldd	r30, Y+1	; 0x01
    1b5a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b5c:	81 81       	ldd	r24, Z+1	; 0x01
    1b5e:	8c 93       	st	X, r24
		OCR0 = ConfigPtr->CompareValue;
    1b60:	ac e5       	ldi	r26, 0x5C	; 92
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	e9 81       	ldd	r30, Y+1	; 0x01
    1b66:	fa 81       	ldd	r31, Y+2	; 0x02
    1b68:	83 81       	ldd	r24, Z+3	; 0x03
    1b6a:	8c 93       	st	X, r24
		SET_BIT (TIMSK,OCIE0);  // Enable Timer0 Compare Interrupt
    1b6c:	a9 e5       	ldi	r26, 0x59	; 89
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	e9 e5       	ldi	r30, 0x59	; 89
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	82 60       	ori	r24, 0x02	; 2
    1b78:	8c 93       	st	X, r24
		/* Configure timer0 control register
			 * 1. Non PWM mode FOC0=1
			 * 2. CTC Mode WGM01=1 & WGM00=0
			 * 3. No need for OC0 so COM00=0 & COM01=0 , "we'll do so using PWM mode"
			 */
		SET_BIT(TCCR0,FOC0);
    1b7a:	a3 e5       	ldi	r26, 0x53	; 83
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	e3 e5       	ldi	r30, 0x53	; 83
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	80 68       	ori	r24, 0x80	; 128
    1b86:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    1b88:	a3 e5       	ldi	r26, 0x53	; 83
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	e3 e5       	ldi	r30, 0x53	; 83
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	88 60       	ori	r24, 0x08	; 8
    1b94:	8c 93       	st	X, r24

		TCCR0 =(TCCR0&0xF8) | (ConfigPtr->Clock); // clock
    1b96:	a3 e5       	ldi	r26, 0x53	; 83
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	e3 e5       	ldi	r30, 0x53	; 83
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	98 2f       	mov	r25, r24
    1ba2:	98 7f       	andi	r25, 0xF8	; 248
    1ba4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ba6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ba8:	82 81       	ldd	r24, Z+2	; 0x02
    1baa:	89 2b       	or	r24, r25
    1bac:	8c 93       	st	X, r24
    1bae:	39 c0       	rjmp	.+114    	; 0x1c22 <Timer0_init+0x132>
	}


	else if (ConfigPtr->Mode == PWM_MODE)
    1bb0:	e9 81       	ldd	r30, Y+1	; 0x01
    1bb2:	fa 81       	ldd	r31, Y+2	; 0x02
    1bb4:	80 81       	ld	r24, Z
    1bb6:	82 30       	cpi	r24, 0x02	; 2
    1bb8:	a1 f5       	brne	.+104    	; 0x1c22 <Timer0_init+0x132>
	{
		TCNT0 = ConfigPtr->InitialValue;
    1bba:	a2 e5       	ldi	r26, 0x52	; 82
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	e9 81       	ldd	r30, Y+1	; 0x01
    1bc0:	fa 81       	ldd	r31, Y+2	; 0x02
    1bc2:	81 81       	ldd	r24, Z+1	; 0x01
    1bc4:	8c 93       	st	X, r24
		OCR0 = ConfigPtr->DutyCycle;
    1bc6:	ac e5       	ldi	r26, 0x5C	; 92
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e9 81       	ldd	r30, Y+1	; 0x01
    1bcc:	fa 81       	ldd	r31, Y+2	; 0x02
    1bce:	84 81       	ldd	r24, Z+4	; 0x04
    1bd0:	8c 93       	st	X, r24
		DDRB  = DDRB | (1<<PB3); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
    1bd2:	a7 e3       	ldi	r26, 0x37	; 55
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	e7 e3       	ldi	r30, 0x37	; 55
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	88 60       	ori	r24, 0x08	; 8
    1bde:	8c 93       	st	X, r24
		/* Configure timer control register
		 * 1. Fast PWM mode FOC0=0
		 * 2. Fast PWM Mode WGM01=1 & WGM00=1
		 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
		 */
		SET_BIT (TCCR0,WGM00);
    1be0:	a3 e5       	ldi	r26, 0x53	; 83
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	e3 e5       	ldi	r30, 0x53	; 83
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	80 64       	ori	r24, 0x40	; 64
    1bec:	8c 93       	st	X, r24
		SET_BIT (TCCR0,WGM01);
    1bee:	a3 e5       	ldi	r26, 0x53	; 83
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	e3 e5       	ldi	r30, 0x53	; 83
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	88 60       	ori	r24, 0x08	; 8
    1bfa:	8c 93       	st	X, r24
		SET_BIT (TCCR0,COM01);
    1bfc:	a3 e5       	ldi	r26, 0x53	; 83
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	e3 e5       	ldi	r30, 0x53	; 83
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	80 62       	ori	r24, 0x20	; 32
    1c08:	8c 93       	st	X, r24


		TCCR0 =(TCCR0&0xF8) | (ConfigPtr->Clock); // clock
    1c0a:	a3 e5       	ldi	r26, 0x53	; 83
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	e3 e5       	ldi	r30, 0x53	; 83
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	98 2f       	mov	r25, r24
    1c16:	98 7f       	andi	r25, 0xF8	; 248
    1c18:	e9 81       	ldd	r30, Y+1	; 0x01
    1c1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c1c:	82 81       	ldd	r24, Z+2	; 0x02
    1c1e:	89 2b       	or	r24, r25
    1c20:	8c 93       	st	X, r24
	}


}
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	08 95       	ret

00001c2c <Timer0_OVF_setCallBack>:



void Timer0_OVF_setCallBack(void(*a_ptr)(void))
{
    1c2c:	df 93       	push	r29
    1c2e:	cf 93       	push	r28
    1c30:	00 d0       	rcall	.+0      	; 0x1c32 <Timer0_OVF_setCallBack+0x6>
    1c32:	cd b7       	in	r28, 0x3d	; 61
    1c34:	de b7       	in	r29, 0x3e	; 62
    1c36:	9a 83       	std	Y+2, r25	; 0x02
    1c38:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_OVF = a_ptr;
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3e:	90 93 87 00 	sts	0x0087, r25
    1c42:	80 93 86 00 	sts	0x0086, r24
}
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	08 95       	ret

00001c50 <Timer0_CMP_setCallBack>:



void Timer0_CMP_setCallBack(void(*a_ptr)(void))
{
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <Timer0_CMP_setCallBack+0x6>
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	9a 83       	std	Y+2, r25	; 0x02
    1c5c:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_CMP = a_ptr;
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	9a 81       	ldd	r25, Y+2	; 0x02
    1c62:	90 93 89 00 	sts	0x0089, r25
    1c66:	80 93 88 00 	sts	0x0088, r24
}
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	cf 91       	pop	r28
    1c70:	df 91       	pop	r29
    1c72:	08 95       	ret

00001c74 <Timer0_DeInit>:


void Timer0_DeInit(void)
{
    1c74:	df 93       	push	r29
    1c76:	cf 93       	push	r28
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
	TCNT0=0;
    1c7c:	e2 e5       	ldi	r30, 0x52	; 82
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	10 82       	st	Z, r1
	TCCR0=0;
    1c82:	e3 e5       	ldi	r30, 0x53	; 83
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,TOIE0);    // Disable Overflow INT
    1c88:	a9 e5       	ldi	r26, 0x59	; 89
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e9 e5       	ldi	r30, 0x59	; 89
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	8e 7f       	andi	r24, 0xFE	; 254
    1c94:	8c 93       	st	X, r24
	CLEAR_BIT (TIMSK,OCIE0);   // Disable Timer0 Compare Interrupt
    1c96:	a9 e5       	ldi	r26, 0x59	; 89
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e9 e5       	ldi	r30, 0x59	; 89
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	8d 7f       	andi	r24, 0xFD	; 253
    1ca2:	8c 93       	st	X, r24
}
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	08 95       	ret

00001caa <__prologue_saves__>:
    1caa:	2f 92       	push	r2
    1cac:	3f 92       	push	r3
    1cae:	4f 92       	push	r4
    1cb0:	5f 92       	push	r5
    1cb2:	6f 92       	push	r6
    1cb4:	7f 92       	push	r7
    1cb6:	8f 92       	push	r8
    1cb8:	9f 92       	push	r9
    1cba:	af 92       	push	r10
    1cbc:	bf 92       	push	r11
    1cbe:	cf 92       	push	r12
    1cc0:	df 92       	push	r13
    1cc2:	ef 92       	push	r14
    1cc4:	ff 92       	push	r15
    1cc6:	0f 93       	push	r16
    1cc8:	1f 93       	push	r17
    1cca:	cf 93       	push	r28
    1ccc:	df 93       	push	r29
    1cce:	cd b7       	in	r28, 0x3d	; 61
    1cd0:	de b7       	in	r29, 0x3e	; 62
    1cd2:	ca 1b       	sub	r28, r26
    1cd4:	db 0b       	sbc	r29, r27
    1cd6:	0f b6       	in	r0, 0x3f	; 63
    1cd8:	f8 94       	cli
    1cda:	de bf       	out	0x3e, r29	; 62
    1cdc:	0f be       	out	0x3f, r0	; 63
    1cde:	cd bf       	out	0x3d, r28	; 61
    1ce0:	09 94       	ijmp

00001ce2 <__epilogue_restores__>:
    1ce2:	2a 88       	ldd	r2, Y+18	; 0x12
    1ce4:	39 88       	ldd	r3, Y+17	; 0x11
    1ce6:	48 88       	ldd	r4, Y+16	; 0x10
    1ce8:	5f 84       	ldd	r5, Y+15	; 0x0f
    1cea:	6e 84       	ldd	r6, Y+14	; 0x0e
    1cec:	7d 84       	ldd	r7, Y+13	; 0x0d
    1cee:	8c 84       	ldd	r8, Y+12	; 0x0c
    1cf0:	9b 84       	ldd	r9, Y+11	; 0x0b
    1cf2:	aa 84       	ldd	r10, Y+10	; 0x0a
    1cf4:	b9 84       	ldd	r11, Y+9	; 0x09
    1cf6:	c8 84       	ldd	r12, Y+8	; 0x08
    1cf8:	df 80       	ldd	r13, Y+7	; 0x07
    1cfa:	ee 80       	ldd	r14, Y+6	; 0x06
    1cfc:	fd 80       	ldd	r15, Y+5	; 0x05
    1cfe:	0c 81       	ldd	r16, Y+4	; 0x04
    1d00:	1b 81       	ldd	r17, Y+3	; 0x03
    1d02:	aa 81       	ldd	r26, Y+2	; 0x02
    1d04:	b9 81       	ldd	r27, Y+1	; 0x01
    1d06:	ce 0f       	add	r28, r30
    1d08:	d1 1d       	adc	r29, r1
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	f8 94       	cli
    1d0e:	de bf       	out	0x3e, r29	; 62
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	cd bf       	out	0x3d, r28	; 61
    1d14:	ed 01       	movw	r28, r26
    1d16:	08 95       	ret

00001d18 <itoa>:
    1d18:	fb 01       	movw	r30, r22
    1d1a:	9f 01       	movw	r18, r30
    1d1c:	e8 94       	clt
    1d1e:	42 30       	cpi	r20, 0x02	; 2
    1d20:	c4 f0       	brlt	.+48     	; 0x1d52 <itoa+0x3a>
    1d22:	45 32       	cpi	r20, 0x25	; 37
    1d24:	b4 f4       	brge	.+44     	; 0x1d52 <itoa+0x3a>
    1d26:	4a 30       	cpi	r20, 0x0A	; 10
    1d28:	29 f4       	brne	.+10     	; 0x1d34 <itoa+0x1c>
    1d2a:	97 fb       	bst	r25, 7
    1d2c:	1e f4       	brtc	.+6      	; 0x1d34 <itoa+0x1c>
    1d2e:	90 95       	com	r25
    1d30:	81 95       	neg	r24
    1d32:	9f 4f       	sbci	r25, 0xFF	; 255
    1d34:	64 2f       	mov	r22, r20
    1d36:	77 27       	eor	r23, r23
    1d38:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__udivmodhi4>
    1d3c:	80 5d       	subi	r24, 0xD0	; 208
    1d3e:	8a 33       	cpi	r24, 0x3A	; 58
    1d40:	0c f0       	brlt	.+2      	; 0x1d44 <itoa+0x2c>
    1d42:	89 5d       	subi	r24, 0xD9	; 217
    1d44:	81 93       	st	Z+, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	00 97       	sbiw	r24, 0x00	; 0
    1d4a:	a1 f7       	brne	.-24     	; 0x1d34 <itoa+0x1c>
    1d4c:	16 f4       	brtc	.+4      	; 0x1d52 <itoa+0x3a>
    1d4e:	5d e2       	ldi	r21, 0x2D	; 45
    1d50:	51 93       	st	Z+, r21
    1d52:	10 82       	st	Z, r1
    1d54:	c9 01       	movw	r24, r18
    1d56:	0c 94 ad 0e 	jmp	0x1d5a	; 0x1d5a <strrev>

00001d5a <strrev>:
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	67 2f       	mov	r22, r23
    1d60:	71 91       	ld	r23, Z+
    1d62:	77 23       	and	r23, r23
    1d64:	e1 f7       	brne	.-8      	; 0x1d5e <strrev+0x4>
    1d66:	32 97       	sbiw	r30, 0x02	; 2
    1d68:	04 c0       	rjmp	.+8      	; 0x1d72 <strrev+0x18>
    1d6a:	7c 91       	ld	r23, X
    1d6c:	6d 93       	st	X+, r22
    1d6e:	70 83       	st	Z, r23
    1d70:	62 91       	ld	r22, -Z
    1d72:	ae 17       	cp	r26, r30
    1d74:	bf 07       	cpc	r27, r31
    1d76:	c8 f3       	brcs	.-14     	; 0x1d6a <strrev+0x10>
    1d78:	08 95       	ret

00001d7a <__udivmodhi4>:
    1d7a:	aa 1b       	sub	r26, r26
    1d7c:	bb 1b       	sub	r27, r27
    1d7e:	51 e1       	ldi	r21, 0x11	; 17
    1d80:	07 c0       	rjmp	.+14     	; 0x1d90 <__udivmodhi4_ep>

00001d82 <__udivmodhi4_loop>:
    1d82:	aa 1f       	adc	r26, r26
    1d84:	bb 1f       	adc	r27, r27
    1d86:	a6 17       	cp	r26, r22
    1d88:	b7 07       	cpc	r27, r23
    1d8a:	10 f0       	brcs	.+4      	; 0x1d90 <__udivmodhi4_ep>
    1d8c:	a6 1b       	sub	r26, r22
    1d8e:	b7 0b       	sbc	r27, r23

00001d90 <__udivmodhi4_ep>:
    1d90:	88 1f       	adc	r24, r24
    1d92:	99 1f       	adc	r25, r25
    1d94:	5a 95       	dec	r21
    1d96:	a9 f7       	brne	.-22     	; 0x1d82 <__udivmodhi4_loop>
    1d98:	80 95       	com	r24
    1d9a:	90 95       	com	r25
    1d9c:	bc 01       	movw	r22, r24
    1d9e:	cd 01       	movw	r24, r26
    1da0:	08 95       	ret

00001da2 <_exit>:
    1da2:	f8 94       	cli

00001da4 <__stop_program>:
    1da4:	ff cf       	rjmp	.-2      	; 0x1da4 <__stop_program>
